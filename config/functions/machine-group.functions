machineGroupFunctions=()

function prepareMachineGroupPaths()
{
	configMachineGroupPath="$machineGroupsPath"/"$machineGroup"
	if [ ! -d "$configMachineGroupPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group config path $configMachineGroupPath"
		exit 1
	fi
	
	configMachineGeneratorScriptletsPath="$configMachineGroupPath"/generator-scriptlets
	if [ ! -d "$configMachineGeneratorScriptletsPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group generator-scriptlets path $configMachineGeneratorScriptletsPath"
		exit 1
	fi
	
	cacheMachineGroupPath="$cachePath"/"$machineGroup"
	mkdir -m 0755 -p "$cacheMachineGroupPath"
	
	configMachineGroupDevicesPath="$configMachineGroupPath"/devices
	if [ ! -f "$configMachineGroupDevicesPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group devices file $configMachineGroupDevicesPath"
		exit 1
	fi
	
	configMachineGroupRootOverlaysPath="$configMachineGroupPath"/root-overlays
	if [ ! -d "$configMachineGroupRootOverlaysPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group root-overlays folder $configMachineGroupRootOverlaysPath"
		exit 1
	fi
	
	machinesPath="$configMachineGroupPath"/machines
	if [ ! -d "$machinesPath" ]; then
		informationMessage FAIL "Missing machine-group machines path $machinesPath"
		exit 1
	fi
}
machineGroupFunctions+=(prepareMachineGroupPaths)

function cleanUpMachineGroupsCache()
{
	pushd "$cachePath" 1>/dev/null 2>/dev/null
		local cachedMachineGroup
		for cachedMachineGroup in *
		do
			if [ ! -d "$cachedMachineGroup" ]; then
				continue
			fi
			local -i found=0
			local knownMachineGroup
			for knownMachineGroup in "${knownMachineGroups[@]}"
			do
				if [ "$knownMachineGroup" = "$cachedMachineGroup" ]; then
					found=1
					break
				fi
			done
			if [ $found -eq 0 ]; then
				rm -rf "$cachedMachineGroup"
			fi
		done
	popd 1>/dev/null 2>/dev/null
}
machineGroupFunctions+=(cleanUpMachineGroupsCache)

knownMachines=()
function determineKnownMachines()
{
	knownMachines=()
	pushd "$machinesPath" 1>/dev/null 2>/dev/null
		local knownMachine
		for knownMachine in *
		do
			if [ ! -e "$knownMachine" ]; then
				continue
			fi
			knownMachines+=("$knownMachine")
		done
	popd 1>/dev/null 2>/dev/null
}
machineGroupFunctions+=(determineKnownMachines)

function sourceMachineGroupGeneratorScriptlets()
{
	generatedMachineGroupRootOverlaysPath="$configMachineGroupRootOverlaysPath"/generated
	mkdir -m 0755 -p "$generatedMachineGroupRootOverlaysPath"
	
	pushd "$configMachineGeneratorScriptletsPath" 1>/dev/null 2>/dev/null
		local generatorScriptlet
		for generatorScriptlet in *.generator-scriptlet
		do
			if [ -e "$generatorScriptlet" ]; then
				informationMessage INFO "Sourcing generator-scriptlet $generatorScriptlet"
				source "$generatorScriptlet"
			fi
		done
	popd 1>/dev/null 2>/dev/null
}
machineGroupFunctions+=(sourceMachineGroupGeneratorScriptlets)

function determineMachines()
{
	machines=()
	pushd "$machinesPath" 1>/dev/null 2>/dev/null
		
		local machineName
		for machineName in *
		do
			if [ -e "$machineName" ]; then
				machines+=("$machineName")
			fi
		done
		
	popd  1>/dev/null 2>/dev/null
}
machineGroupFunctions+=(determineMachines)

function configureSuperminVerbosity()
{
	if [ "$optionVerbose" = yes ]; then
		readonly superminVerbosity=" -v"
	else
		readonly superminVerbosity=""
	fi
}
machineGroupFunctions+=(configureSuperminVerbosity)

function buildMachines()
{
	local machine
	local machineFunction
	for machine in "${machines[@]}"
	do
		for machineFunction in "${machineFunctions[@]}"
		do
			$machineFunction
		done
	done
}
machineGroupFunctions+=(buildMachines)

function setMachineGroupsPath()
{
	readonly machineGroupsPath="$configPath"/machine-groups
	mkdir -m 0755 -p "$machineGroupsPath"
}

knownMachineGroups=()
function determineKnownMachineGroups()
{
	knownMachineGroups=()
	pushd "$machineGroupsPath" 1>/dev/null 2>/dev/null
		local knownMachineGroup
		for knownMachineGroup in *
		do
			if [ ! -e "$knownMachineGroup" ]; then
				continue
			fi
			knownMachineGroups+=("$knownMachineGroup")
		done
	popd 1>/dev/null 2>/dev/null
}

function buildMachineGroups()
{
	setMachineGroupsPath
	determineKnownMachineGroups
	
	local machineGroup
	local machineGroupFunction
	for machineGroup in "${machineGroups[@]}"
	do
		for machineGroupFunction in "${machineGroupFunctions[@]}"
		do
			$machineGroupFunction
		done
	done
}
