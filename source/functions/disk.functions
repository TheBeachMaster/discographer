diskCreateFunctions=()

function defaultDiskImageConfiguration()
{
	source "$configDefaultsPath"/disk.default.configuration
}
diskCreateFunctions+=(defaultDiskImageConfiguration)

function sourceDiskImageConfiguration()
{
	source "$configMachineDisksPath"/"$disk".disk
	
	machineDiskImagePath="$cacheMachineDisksPath"/"$disk".img
	
	machineDiskImageMountPath="$cacheMachineDisksMountsPath${machineDiskMountPoint}"
}
diskCreateFunctions+=(sourceDiskImageConfiguration)

function verifyDiskImageConfiguration()
{
	if [ ${#machineDiskVolumeLabel16Bytes} -gt 16 ]; then
		informationMessage FAIL "Machine $machine has a disk $disk with a label greater than 16 characters (defaults to disk name) in parameters or disk folder"
		exit 1
	fi
	
	case "$machineDiskFilesystemType" in
		
		ext[2-4])
			:
		;;
		
		swap)
			:
		;;
		
		*)
			informationMessage FAIL "Machine $machine has a disk $disk with an unknown filesystem type $machineDiskFilesystemType"
			exit 1
		;;
	
	esac
}
diskCreateFunctions+=(verifyDiskImageConfiguration)

function captureInABashDictionaryMachineDiskConfigurationForMountingAndUnmounting()
{
	machineDisksConfigurationFilesystemType["$disk"]="$machineDiskFilesystemType"
	machineDisksConfigurationBlockSize["$disk"]="$machineDiskBlockSize"
	machineDisksConfigurationMountPoint["$disk"]="$machineDiskMountPoint"
	machineDisksConfigurationImagePath["$disk"]="$machineDiskImagePath"
	machineDisksConfigurationImageMountPath["$disk"]="$machineDiskImageMountPath"
	machineDisksConfigurationUuid["$disk"]="$machineDiskUuid"
	machineDisksConfigurationMountOptions["$disk"]="$machineDiskMountOptions"
	machineDisksConfigurationDumpOptions["$disk"]="$machineDiskDumpOptions"
	machineDisksConfigurationFsckOptions["$disk"]="$machineDiskFsckOptions"
	machineDisksConfigurationShrinkDisk["$disk"]="$machineDiskShrink"
	machineDisksConfigurationBootable["$disk"]="$machineDiskBootable"
}
diskCreateFunctions+=(captureInABashDictionaryMachineDiskConfigurationForMountingAndUnmounting)

function createDiskImageSpareFile()
{
	rm -rf "$machineDiskImagePath"
	truncate -s "$machineDiskSize" "$machineDiskImagePath"
	
	machineDiskSize="$(stat --format='%s' "$machineDiskImagePath")"
	local -ir dividedMachineDiskSize=$((machineDiskSize/512))
	local -ir rehydratedMachineDiskSize=$((dividedMachineDiskSize*512))
	if [ $machineDiskSize -ne $rehydratedMachineDiskSize ]; then
		informationMessage FAIL "Machine $machine disk $disk has a size that is not divisible by 512"
		exitError 1
	fi
	
	local -ir dividedBlockSize=$((machineDiskBlockSize/512))
	local -ir rehydratedBlockSize=$((dividedBlockSize*512))
	
	if [ $machineDiskBlockSize -ne $rehydratedBlockSize ]; then
		informationMessage FAIL "Machine $machine disk $disk has a block size that is not divisible by 512"
		exitError 1
	fi
}
diskCreateFunctions+=(createDiskImageSpareFile)

function createDiskImagePartitionTable()
{
	case "$machineHypervisorDiskPartioning=dos" in
		
		unpartitioned)
			return 0
		;;
		
		gpt)
			informationMessage FAIL "GPT partitioning is unsupported at this time"
			exitError 1
		;;
		
		dos)
			:
		;;
	
	esac
	
	# We need to specify C, H, S (disk geometry)
	
	#Disk disk.name: 783 cylinders, 255 heads, 63 sectors/track
	#Units = cylinders of 8225280 bytes, blocks of 1024 bytes, counting from 0
	
	# default for start is first unassigned
	local -r start=""
	
	# default for size is to end of disk
	local -r size=","
	
	# id is either 0xXX or E, S, L or X (L is native, S is swap)
	if [ "$machineDiskFilesystemType" = "swap" ]; then
		local -r id=,S
	else
		local -r id=,L
	fi
	
	# bootable is either * or -
	if [ "$machineDiskBootable" = "yes" ]; then
		local -r bootable=',*'
	else
		local -r bootable=''
	fi
	
	local -r partitionsMap="$cacheMachineArtefactsPath"/"$disk".sfdisk.partitions.map
	
	# <start>,<size>,<id>,<bootable>,<c,h,s>,<c,h,s>
	cat >"$partitionsMap" <<-EOF
		{$start}${size}${id}${bootable}
	EOF
	
	sfdisk -uS -H 255 -S ${sectors} <"$partitionsMap"
	
	# -uS reports in sectors of 512 bytes
	# suppress errors about disk geometry
	sfdisk -d "$machineDiskImagePath" 2>/dev/null | sed -e "s;${machineDiskImagePath};${disk};g" >"$cacheMachineArtefactsPath"/"$disk".partition-table-sfdisk.dump.txt
	sfdisk -uS --list "$machineDiskImagePath" 2>/dev/null | sed -e "s;${machineDiskImagePath};${disk};g" >"$cacheMachineArtefactsPath"/"$disk".partition-table-sfdisk.report.txt
	
	echo "FIX ME"
	exit 50
}
diskCreateFunctions+=(createDiskImagePartitionTable)

function createDiskImageFilesystem()
{
	if mountPointIsSpecial; then
		mkswap -f -L "$machineDiskVolumeLabel16Bytes" -U "$machineDiskUuid" "$machineDiskImagePath" 1>/dev/null 2>/dev/null
		return 0
	fi
	
	mkfs."$machineDiskFilesystemType" -F -q -b $machineDiskBlockSize -L "$machineDiskVolumeLabel16Bytes" -U "$machineDiskUuid" -O "$machineDiskOptions" "$machineDiskImagePath"
}
diskCreateFunctions+=(createDiskImageFilesystem)

function createDiskImageMountpoint()
{
	mkdir -m 0755 -p "${machineDisksConfigurationImageMountPath["$disk"]}"
}
diskMountFunctions+=(createDiskImageMountpoint)

function mountDiskImage()
{
	mountLoopback "${machineDisksConfigurationFilesystemType["$disk"]}" "${machineDisksConfigurationImagePath["$disk"]}" "${machineDisksConfigurationImageMountPath["$disk"]}"
}
diskMountFunctions+=(mountDiskImage)


diskUnmountFunctions=()

function syncDiskImage()
{
	sync
}
diskUnmountFunctions+=(syncDiskImage)

function unmountDiskImage()
{
	unmountLoopback "${machineDisksConfigurationImageMountPath["$disk"]}" || true
}
diskUnmountFunctions+=(unmountDiskImage)

function shrinkDiskImage()
{
	if [ "${machineDisksConfigurationShrinkDisk["$disk"]}" != "yes" ]; then
		return 0
	fi
	
	case "${machineDisksConfigurationFilesystemType["$disk"]}" in
		
		ext2|ext3|ext4)
			:
		;;
		
		*)
			return 0
		;;
	esac
	
	machineDiskBlockSize=${machineDisksConfigurationBlockSize["$disk"]}
	
	e2fsck -f "${machineDisksConfigurationImagePath["$disk"]}" 1>/dev/null 2>/dev/null
	local -ir minimumSize="$(resize2fs -P supermin-wrapper/source/cache/machine-groups/examples/machines/example/disks/boot.img 2>/dev/null | awk '{print $7}')"
	resize2fs -M supermin-wrapper/source/cache/machine-groups/examples/machines/example/disks/boot.img 2>/dev/null
	
	local -ir shrinkSizeInBytes=$((minimumSize*machineDiskBlockSize))
	truncate -s $shrinkSizeInBytes "${machineDisksConfigurationImagePath["$disk"]}"
}
diskUnmountFunctions+=(shrinkDiskImage)

function convertDiskImage()
{
	convertDiskImage_${machineHypervisor}
}
#diskUnmountFunctions+=(convertDiskImage)
