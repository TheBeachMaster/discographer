function ovf2_xml_Envelope()
{
	local indentation=""
	
	xml_version
	xml_start "Envelope ovf:version='2.0' xml:lang='en-US' xmlns='http://schemas.dmtf.org/ovf/envelope/2' xmlns:ovf='http://schemas.dmtf.org/ovf/envelope/2' xmlns:rasd='http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData' xmlns:vssd='http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:vbox='http://www.virtualbox.org/ovf/machine' xmlns:epasd='http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_EthernetPortAllocationSettingData.xsd' xmlns:sasd='http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_StorageAllocationSettingData.xsd'"
	
		ovf2_xml_Envelope_References
		ovf2_xml_Envelope_DiskSection
		ovf2_xml_Envelope_NetworkSection
		ovf2_xml_Envelope_VirtualSystem
	
	xml_end "Envelope"
}

function ovf2_xml_Envelope_References()
{
	xml_start "References"
		
		local -i diskIndex=1
		for disk in "${machine_disks[@]}"
		do
			xml_selfclose "File ovf:href='${disk}.vmdk' ovf:id='file${diskIndex}'"
			diskIndex=$((diskIndex+1))
		done
		
	xml_end "References"
}

function ovf2_xml_Envelope_DiskSection()
{
	xml_start "DiskSection"
	
		local -i diskIndex=1
		for disk in "${machine_disks[@]}"
		do
			xml_selfclose "File ovf:href='disk${diskIndex}.${machineHypervisorDiskExtension}' ovf:id='file${diskIndex}'"
			
echo "************** FIX ME (SET VMDK DISK UUID in convertDisk_vmdk) **************"
echo "************** FFIX ME (DISK CAPACITY) **************"
echo "************** FFIX ME (DISK FORMAT URI) **************"
			qemu-img info -f vmdk --output=human "$machine_cacheArtefactsPath"/"${disk}.${machineHypervisorDiskExtension}"
echo "************** FIX ME (DISK UUID) **************"
echo "************** FFIX ME (DISK CAPACITY) **************"
			
			# Setting a disk UUID: VBoxManage internalcommands setvdiuuid disk2.vdi
			
			# integrate guestfish (to create disks with partitions and LVM, RAID, etc) and libguestfs
			# will be needed if using disk partitions, MBR or GPT for boot records...
			# virt-builder: install latest kernel and initrd
			# virt-resize: resize a disk
			
			local diskUuid="${machine_configuration_disksUuid["$disk"]}"
			
			xml_selfclose "Disk ovf:capacity='17179869184' ovf:diskId='${disk}' ovf:fileRef='file${diskIndex}' ovf:format='http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized' vbox:uuid='${diskUuid}'"
			
			diskIndex=$((diskIndex+1))
		done

	xml_end "DiskSection"
}

function ovf2_xml_Envelope_NetworkSection()
{
	xml_start "NetworkSection"
		
		xml_value Info "Logical networks used in the package"
		xml_start "Network ovf:name='${configuration_machine_networkKind}'"
			
			xml_value Description "Logical network used by this appliance."
			
		xml_end "Network"
		
	xml_end "NetworkSection"
}

function ovf2_xml_Envelope_VirtualSystem()
{
	xml_start "VirtualSystem ovf:id='${machineName}'"
		
		xml_value Info "A virtual machine"
		ovf2_xml_Envelope_VirtualSystem_ProductSection
		ovf2_xml_Envelope_VirtualSystem_AnnotationSection
		ovf2_xml_Envelope_VirtualSystem_EulaSection
		ovf2_xml_Envelope_VirtualSystem_OperatingSystemSection
		ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection
		
		if [ "$configuration_machine_hypervisorName" = "virtualbox" ]; then
			virtualbox_xml_VirtualBox_Machine "yes"
		fi
		
	xml_end "VirtualSystem"
}

function ovf2_xml_Envelope_VirtualSystem_ProductSection()
{
	xml_start "ProductSection"
		
		xml_value Info "Meta-information about the installed software"
		xml_value Product "${machineName}"
		xml_value Vendor "raphaelcohn"
		xml_value Version "${machineVersion}"
		xml_value ProductUr "${machineUrl}"
		xml_value VendorUrl "http://github.com/raphaelcohn/supermin-wrapper"
		
	xml_end "ProductSection"
}

function ovf2_xml_Envelope_VirtualSystem_AnnotationSection()
{
	xml_start "AnnotationSection"
		
		xml_value Info "A human-readable annotation"
		xml_value Annotation "Immutable machine image for ${machineName} produced by ${ourName}"
		
	xml_end "AnnotationSection"
}

function ovf2_xml_Envelope_VirtualSystem_EulaSection()
{
	xml_start "EulaSection"
		
		xml_value Info "License agreement for the virtual system<"
		xml_indented "<License><![CDATA["
		cat <<-EOF
			The MIT License (MIT)

			Copyright (c) 2014 Raphael Cohn

			Permission is hereby granted, free of charge, to any person obtaining a copy
			of this software and associated documentation files (the "Software"), to deal
			in the Software without restriction, including without limitation the rights
			to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			copies of the Software, and to permit persons to whom the Software is
			furnished to do so, subject to the following conditions:

			The above copyright notice and this permission notice shall be included in all
			copies or substantial portions of the Software.

			THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
			SOFTWARE.
		EOF
		echo "]]></License>"
		
	xml_end "EulaSection"
}

function ovf2_xml_Envelope_VirtualSystem_OperatingSystemSection()
{
	xml_start "OperatingSystemSection ovf:id='${configuration_machine_operatingSystemId}'"
		
		xml_value Info "The kind of installed guest operating system"
		xml_value Description "${configuration_machine_operatingSystemName}"
		xml_indented "<vbox:OSType ovf:required='false'>${configuration_machine_operatingSystemName}</vbox:OSType>"
		
	xml_end "OperatingSystemSection"
}

function ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection()
{
	local -i instanceId=-1
	
	xml_start "VirtualHardwareSection"
		
		xml_value Info "Virtual hardware requirements for a virtual machine"
		ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_System
		ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_ItemCpu
		ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_ItemMemory
		ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_ItemDiskControllerAndStorageItems
		ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_StorageItem
		ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_EthernetPortItem
		
	xml_end "VirtualHardwareSection"
}

function ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_System()
{
	xml_start "System"
		
		instanceId=$((instanceId+1))
		
		xml_value vssd:ElementName "Virtual Hardware Family"
		xml_value vssd:InstanceID "${instanceId}"
		xml_value vssd:VirtualSystemIdentifier "${machineName}"
		xml_value vssd:VirtualSystemType "${configuration_machine_hypervisorOvfSystemType}"
		
	xml_end "System"
}

function ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_ItemCpu()
{
	xml_start "Item"
		
		instanceId=$((instanceId+1))
		
		xml_value rasd:Caption "${configuration_machine_cpusCount} virtual CPU"
		xml_value rasd:Description "Number of virtual CPUs"
		xml_value rasd:InstanceID "${instanceId}"
		xml_value rasd:ResourceType "3"
		xml_value rasd:VirtualQuantity "${configuration_machine_cpusCount}"
	
	xml_end "Item"
}

function ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_ItemMemory()
{
	xml_start "Item"
		
		instanceId=$((instanceId+1))
		
		xml_value rasd:Caption "${configuration_machine_memoryMegabytes} MB of memory"
		xml_value rasd:Description "Memory Size"
		xml_value rasd:InstanceID "${instanceId}"
		xml_value rasd:ResourceType "4"
		xml_value rasd:AllocationUnits "MegaBytes"
		xml_value rasd:VirtualQuantity "${configuration_machine_memoryMegabytes}"
		
	xml_end "Item"
}

function ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_ItemDiskControllerAndStorageItems()
{
	case "$configuration_machine_diskControllerKind" in
		
		IDE)
			local -r captionBase="ideController"
			local -r descriptionBase="IDE"
			local -r resourceType=5
			local -r namespace=rasd
			case "$configuration_machine_diskControllerImplementation" in
				
				PIIX3|PIIX4|ICH6)
					:
				;;
				
				*)
					informationMessage FAIL "Machine disk controller hardware implementation (configuration_machine_diskControllerImplementation) $configuration_machine_diskControllerImplementation is not supported"
					exitError 1
				;;
				
			esac
		;;
		
		SATA)
			local -r captionBase="sataController"
			local -r descriptionBase="SATA"
			local -r resourceType=20
			local -r namespace=rasd
			if [ "$configuration_machine_diskControllerImplementation" != "AHCI" ]; then
				informationMessage FAIL "Machine disk controller hardware implementation (configuration_machine_diskControllerImplementation) $configuration_machine_diskControllerImplementation is not supported"
				exitError 1
			fi
		;;
		
		SAS)
			local -r captionBase="scsiController"
			local -r descriptionBase="SCSI"
			local -r resourceType=6
			local -r namespace=sasd
			if [ "$configuration_machine_diskControllerImplementation" != "lsilogicsas" ]; then
				informationMessage FAIL "Machine disk controller hardware implementation (configuration_machine_diskControllerImplementation) $configuration_machine_diskControllerImplementation is not supported"
				exitError 1
			fi
		;;
		
		*)
			informationMessage FAIL "Machine disk controller hardware kind (configuration_machine_diskControllerKind) $configuration_machine_diskControllerKind is not supported"
			exitError 1
		;;
		
	esac
	
	local -i index=0
	
	xml_start "Item"
		
		instanceId=$((instanceId+1))
		
		xml_value rasd:Address "${index}"
		xml_value rasd:Caption "${captionBase}${index}"
		xml_value rasd:Description "${descriptionBase} Controller"
		xml_value rasd:InstanceID "${instanceId}"
		xml_value rasd:ResourceSubType "${configuration_machine_diskControllerImplementation}"
		xml_value rasd:ResourceType "${resourceType}"

	xml_end "Item"
	local -i parentInstanceId=$instanceId
	
	# disks seem to be one based
	local -i index=0
	local -i diskIndex=1
	local disk
	for disk in "${machine_disks[@]}"
	do
		instanceId=$((instanceId+1))
		
		xml_start "StorageItem"
			
			xml_value sasd:AddressOnParent $index
			xml_value sasd:Caption "disk${diskIndex}"
			xml_value sasd:Description "Disk Image"
			xml_value sasd:HostResource "/disk/${disk}"
			xml_value sasd:InstanceID "${instanceId}"
			xml_value sasd:Parent "${parentInstanceId}"
			xml_value sasd:ResourceType "17"
			
		xml_end "StorageItem"
		
		index=$((index+1))
		diskIndex=$((diskIndex+1))
	done
}

function ovf2_xml_Envelope_VirtualSystem_VirtualHardwareSection_EthernetPortItem()
{
	xml_start "EthernetPortItem"
		
		local nic
		local ethernetControllerHardware
		for nic in "${machine_nics[@]}"
		do
			instanceId=$((instanceId+1))
			
			if [ "${machine_configuration_nicsVariant["$nic"]}" = "virtual" ]; then
				ethernetControllerHardware="virtio-net"
			else
				ethernetControllerHardware="E1000"
			fi
			
			xml_value epasd:AutomaticAllocation "true"
			xml_value epasd:Caption "Ethernet adapter on '${configuration_machine_networkKind}'"
			xml_value epasd:Connection "${configuration_machine_networkKind}"
			xml_value epasd:InstanceID "${instanceId}"
			xml_value epasd:ResourceSubType "${machineEthernetControllerType}"
			xml_value epasd:ResourceType "10"
		done

	xml_end "EthernetPortItem"
}
