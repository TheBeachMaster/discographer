function hash_recordHashes()
{
	local -r prefix="$1"
	local -r path="$2"
	local -r hashesFileParentPath="$3"
	local -r hashesFileNameExtension="$4"
	
	local -r topLevelFolder="${prefix}${path}"
	
	# BUG: Tab and Newline in file names cause problems. Can be fixed (find uses -print0, xargs -0, put the file path at file end) but painful to utilise
	# BUG: Prefix that contains ';'
	
	temporaryFiles_newFileToRemoveOnExit
	local -r fileObjectFile="$TMP_FILE"
	
	# TextualFileType UID GID OctalMode MTime CTime DeviceMajor DeviceMinor Size Hardlinks
	temporaryFiles_newFileToRemoveOnExit
	local -r statFile="$TMP_FILE"
	find "$topLevelFolder" | tee "$fileObjectFile" | xargs stat --printf "%F\t%u\t%g\t%a\t%Y\t%Z\t%T\t%t\t%s\t%h\n" >"$statFile"
	
	# SELinuxContext
	# BUG: SELinux is done separately as it doesn't work on Debian and some OS
	temporaryFiles_newFileToRemoveOnExit
	local -r selinuxFile="$TMP_FILE"
	xargs --arg-file "$fileObjectFile" stat -c '%C' >"$selinuxFile"
	
	# Capabilities
	temporaryFiles_newFileToRemoveOnExit
	local -r getcapFile="$TMP_FILE"
	xargs --arg-file "$fileObjectFile" getcap -v | awk ' $2 ~ /=/  {print $3}; $2 !~ /=/ {print ""}' >"$getcapFile"
	
	# FileContentsSummary
	temporaryFiles_newFileToRemoveOnExit
	local -r fileFile="$TMP_FILE"
	xargs --arg-file "$fileObjectFile" file --brief --keep-going --no-dereference --uncompress >"$fileFile"
	
	# ACL
	temporaryFiles_newFileToRemoveOnExit
	local -r aclFile="$TMP_FILE"
	xargs --arg-file "$fileObjectFile" getfacl --absolute-names --physical --numeric --all-effective --omit-header --access -- | tr '\n' '|' | sed -e 's/||/\n/g' >"$aclFile"
	
	# DefaultACL
	temporaryFiles_newFileToRemoveOnExit
	local -r defaultAclFile="$TMP_FILE"
	xargs --arg-file "$fileObjectFile" getfacl --absolute-names --physical --numeric --all-effective --omit-header --default -- | tr '\n' '|' | sed -e 's/||/\n/g' >"$defaultAclFile"
	
	# Paste together
	temporaryFiles_newFileToRemoveOnExit
	local -r sortedFile1="$TMP_FILE"
	paste "$fileObjectFile" "$statFile" "$selinuxFile" "$getcapFile" "$fileFile" "$aclFile" "$defaultAclFile" | LC_ALL=C sort --key 1 >"$sortedFile1"
	
	
	# FilePath Version Chattr (file and folders only)
	temporaryFiles_newFileToRemoveOnExit
	local -r failedChattrFile="$TMP_FILE"
	temporaryFiles_newFileToRemoveOnExit
	local -r missortedChattrFile="$TMP_FILE"
	xargs --arg-file "$fileObjectFile" lsattr -d -v 2>"$failedChattrFile" | awk '{print $3 "\t" $1 "\t" $2}' >"$missortedChattrFile"
	awk '{print $9 "\tX\tX"}' "$failedChattrFile" >>"$missortedChattrFile"
	
	# Sort
	temporaryFiles_newFileToRemoveOnExit
	local -r sortedFile2="$TMP_FILE"
	LC_ALL=C sort --key 1 "$missortedChattrFile" | cut --fields=1 --complement >"$sortedFile2"
	
	
	# Prepare for file hashes - empty lines to append
	temporaryFiles_newFileToRemoveOnExit
	local -r fileOnlyFile="$TMP_FILE"
	find "$topLevelFolder" -type f | awk '{print $1 "\tX" }' >"$fileOnlyFile"
	temporaryFiles_newFileToRemoveOnExit
	local -r everythingButFilesFile="$TMP_FILE"
	find "$topLevelFolder" ! -type f | awk '{print $1 "\tX" }' >"$everythingButFilesFile"
	local -ir emptyLineCount=$(wc --line "$everythingButFilesFile" | awk '{print $1}')
	
	# FilePath MD5 (file only) - note that this line uses a different awk syntax to include the file name
	temporaryFiles_newFileToRemoveOnExit
	local -r missortedMd5File="$TMP_FILE"
	xargs --arg-file "$fileOnlyFile" md5sum | awk '{print $2 "\t" $1}' >"$missortedMd5File"
	cat "$everythingButFilesFile" >>"$missortedMd5File"
	
	# FilePath SHA1 (file only)
	temporaryFiles_newFileToRemoveOnExit
	local -r missortedSha1File="$TMP_FILE"
	xargs --arg-file "$fileOnlyFile" sha1sum | awk '{print $1}' >"$missortedSha1File"
	hash_blankLines $emptyLineCount >>"$missortedSha1File"
	
	# FilePath SHA256 (file only)
	temporaryFiles_newFileToRemoveOnExit
	local -r missortedSha256File="$TMP_FILE"
	xargs --arg-file "$fileOnlyFile" sha256sum | awk '{print $1}' >"$missortedSha256File"
	hash_blankLines $emptyLineCount >>"$missortedSha256File"
	
	# FilePath SHA512 (file only)
	temporaryFiles_newFileToRemoveOnExit
	local -r missortedSha512File="$TMP_FILE"
	xargs --arg-file "$fileOnlyFile" sha512sum | awk '{print $1}' >"$missortedSha512File"
	hash_blankLines $emptyLineCount >>"$missortedSha512File"
	
	# Paste together file hash files
	temporaryFiles_newFileToRemoveOnExit
	local -r sortedFile3="$TMP_FILE"
	paste "$missortedMd5File" "$missortedSha1File" "$missortedSha256File" "$missortedSha512File" | LC_ALL=C sort --key 1 | cut --fields=1 --complement >"$sortedFile3"
	
	
	# Paste all files together and strip any leading prefix; first line is field names
	local -ir prefixLength=${#prefix}
	local -r finalFile="$hashesFileParentPath"/hashes."$hashesFileNameExtension"
	printf "Path\tTextualFileType\tUID\tGID\tOctalMode\tMTime\tCTime\tDeviceMajor\tDeviceMinor\tSize\tHardlinks\tSELinuxContext\tCapabilities\tFileContentsSummary\tACL\tDefaultACL\tVersion\tChattr\tMD5\tSHA1\tSHA256\tSHA512\n" >"$finalFile"
	paste "$sortedFile1" "$sortedFile2" "$sortedFile3" | cut --bytes ${prefixLength}- >>"$finalFile"
}

readonly hash_newline=$'\n'
function hash_blankLines()
{
	local -ir count=$1
	local spaces
	printf -v spaces '%*s' $count
	echo -n "${z// /${hash_newline}}"
}