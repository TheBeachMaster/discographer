mainFunctions=()

function setSomePaths()
{
	configDefaultsPath="$configPath"/defaults
	if [ ! -d "$configDefaultsPath" ]; then
		informationMessage FAIL "Defaults config missing at path $configDefaultsPath"
		exit 1
	fi
}
mainFunctions+=(setSomePaths)

function setYumConfigPaths()
{
	export configYumPath="$configPath"/yum
	if [ ! -d "$configYumPath" ]; then
		informationMessage FAIL "Yum config missing at path $configYumPath"
		exit 1
	fi
	readonly configYumConfigFileTemplatePath="$configYumPath"/yum.conf.template
	if [ ! -f "$configYumConfigFileTemplatePath" ]; then
		informationMessage FAIL "Yum config file template missing at path $configYumConfigFileTemplatePath"
		exit 1
	fi
	
	export cacheYumPath="$cachePath"/yum
	mkdir -m 0755 -p "$cacheYumPath"
}
mainFunctions+=(setYumConfigPaths)

function setMachineGroupsPath()
{
	readonly machineGroupsPath="$configPath"/machine-groups
	mkdir -m 0755 -p "$machineGroupsPath"
}
mainFunctions+=(setMachineGroupsPath)

knownMachineGroups=()
function determineKnownMachineGroups()
{
	knownMachineGroups=()
	pushd "$machineGroupsPath" 1>/dev/null 2>/dev/null
		local knownMachineGroup
		for knownMachineGroup in *
		do
			if [ ! -e "$knownMachineGroup" ]; then
				continue
			fi
			knownMachineGroups+=("$knownMachineGroup")
		done
	popd 1>/dev/null 2>/dev/null
}
mainFunctions+=(determineKnownMachineGroups)

function buildMachineGroups()
{
	local machineGroup
	local machineGroupFunction
	for machineGroup in "${machineGroups[@]}"
	do
		for machineGroupFunction in "${machineGroupFunctions[@]}"
		do
			informationMessage INFO "${tab}${machineGroup} ${machineGroupFunction}"
			$machineGroupFunction
		done
	done
}
mainFunctions+=(buildMachineGroups)

function executeMainFunctions()
{
	local mainFunction
	for mainFunction in "${mainFunctions[@]}"
	do
		informationMessage INFO "${mainFunction}"
		$mainFunction
	done
}
