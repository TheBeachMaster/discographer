main_functions=()

main_functions+=(language_setDefaults)

function registerTrapHandlers()
{
	traps_addNextTrapHandler temporary_removeFilesOnExit
	traps_addNextTrapHandler mounting_removeMountPointsOnExit
}
main_functions+=(registerTrapHandlers)

main_functions+=(dependency_installDependencies)

function main_setSomePaths()
{
	configDefaultsPath="$configPath"/defaults
	if [ ! -d "$configDefaultsPath" ]; then
		informationMessage FAIL "Defaults config missing at path $configDefaultsPath"
		exit 1
	fi
}
main_functions+=(main_setSomePaths)

function main_setYumConfigPaths()
{
	export configYumPath="$configPath"/yum
	if [ ! -d "$configYumPath" ]; then
		informationMessage FAIL "Yum config missing at path $configYumPath"
		exit 1
	fi
	readonly configYumConfigFileTemplatePath="$configYumPath"/yum.conf.template
	if [ ! -f "$configYumConfigFileTemplatePath" ]; then
		informationMessage FAIL "Yum config file template missing at path $configYumConfigFileTemplatePath"
		exit 1
	fi
	
	export cacheYumPath="$cachePath"/yum
	mkdir -m 0755 -p "$cacheYumPath"
}
main_functions+=(main_setYumConfigPaths)

function main_setMachineGroupsPath()
{
	readonly machineGroupsPath="$configPath"/machine-groups
	mkdir -m 0755 -p "$machineGroupsPath"
}
main_functions+=(main_setMachineGroupsPath)

main_knownMachineGroups=()
function main_determineKnownMachineGroups()
{
	main_knownMachineGroups=()
	pushd "$machineGroupsPath" 1>/dev/null 2>/dev/null
		local knownMachineGroup
		for knownMachineGroup in *
		do
			if [ ! -e "$knownMachineGroup" ]; then
				continue
			fi
			main_knownMachineGroups+=("$knownMachineGroup")
		done
	popd 1>/dev/null 2>/dev/null
}
main_functions+=(main_determineKnownMachineGroups)

machineGroupNames=()
function main_buildMachineGroups()
{
	local machineGroupName
	local machine_group_function
	for machineGroupName in "${machineGroupNames[@]}"
	do
		for machine_group_function in "${machine_group_functions[@]}"
		do
			informationMessage INFO "${tab}${machineGroupName} ${machine_group_function}"
			$machine_group_function
		done
	done
}
main_functions+=(main_buildMachineGroups)

function main_executeMainFunctions()
{
	local main_function
	for main_function in "${main_functions[@]}"
	do
		informationMessage INFO "${main_function}"
		$main_function
	done
}
