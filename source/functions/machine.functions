machines=()
machineFunctions=()

function verifyMachineNameIsValidDnsLabel()
{
	local -ir hostnameLength=${#machine}
	if [ $hostnameLength -lt 2 ]; then
		informationMessage FAIL "machine name must be at least 2 characters"
		exit 1
	fi
	
	if [ $hostnameLength -gt 63 ]; then
		informationMessage FAIL "machine name must be no more than 63 characters"
		exit 1
	fi
	
	case "${machine:0:1}" in
		
		[0-9]|-)
			informationMessage FAIL "machine name must not start with a number or hyphen"
			exit 1
		;;
		
		*)
			:
		;;
		
	esac
	
	local convertedHostname
	convertedHostname="$(printf "$machine" | tr -d 'A-Z')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must not contain upper case"
		exit 1
	fi
	
	convertedHostname="$(printf "$machine" | tr -d '.')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must not contain a domain name (ie period)"
		exit 1
	fi
	
	# Delete anything not in abc...
	convertedHostname="$(printf "$machine" | tr -d -C 'abcdefghijklmnopqrstuvwxyz0123456789-')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must consist of a-z, 0-9 or hyphen"
		exit 1
	fi
}
machineFunctions+=(verifyMachineNameIsValidDnsLabel)

function prepareMachinePaths()
{
	export configMachinePath="$machinesPath"/"$machine"
	if [ ! -d "$configMachinePath" ]; then
		informationMessage FAIL "Machine $machine missing machine config path $configMachinePath"
		exit 1
	fi
	
	configMachineConfigurationPath="$configMachinePath"/configuration
	if [ ! -f "$configMachineConfigurationPath" ]; then
		informationMessage FAIL "Machine $machine missing machine configuration file $configMachineConfigurationPath"
		exit 1
	fi
	
	configMachinePackagesPath="$configMachinePath"/packages
	if [ ! -f "$configMachinePackagesPath" ]; then
		informationMessage FAIL "Machine $machine missing machine packages file $configMachinePackagesPath"
		exit 1
	fi
	
	configMachineRpmsPath="$configMachinePath"/rpms
	if [ ! -d "$configMachineRpmsPath" ]; then
		informationMessage FAIL "Machine $machine missing machine rpms folder $configMachineRpmsPath"
		exit 1
	fi
	
	configMachineDisksPath="$configMachinePath"/disks
	if [ ! -d "$configMachineDisksPath" ]; then
		informationMessage FAIL "Machine $machine missing machine disks folder $configMachineDisksPath"
		exit 1
	fi
	
	configMachineNicsPath="$configMachinePath"/nics
	if [ ! -d "$configMachineNicsPath" ]; then
		informationMessage FAIL "Machine $machine missing machine nics folder $configMachineNicsPath"
		exit 1
	fi
	
	configMachineGeneratorsPath="$configMachinePath"/generators
	if [ ! -d "$configMachineGeneratorsPath" ]; then
		informationMessage FAIL "Machine $machine missing machine generators folder $configMachineGeneratorsPath"
		exit 1
	fi
	
	configMachineUnderlaysPath="$configMachinePath"/underlays
	if [ ! -d "$configMachineUnderlaysPath" ]; then
		informationMessage FAIL "Machine $machine missing machine underlays folder $configMachineUnderlaysPath"
		exit 1
	fi
	
	configMachineOverlaysPath="$configMachinePath"/overlays
	if [ ! -d "$configMachineOverlaysPath" ]; then
		informationMessage FAIL "Machine $machine missing machine overlays folder $configMachineOverlaysPath"
		exit 1
	fi
	
	configMachineRepositoriesPath="$configMachinePath"/repositories
	if [ ! -d "$configMachineRepositoriesPath" ]; then
		informationMessage FAIL "Machine $machine missing repositories folder $configMachineRepositoriesPath"
		exit 1
	fi
	
	cacheMachinePath="$cacheMachineGroupMachinesPath"/"$machine"
	mkdir -m 0755 -p "$cacheMachinePath"
	
	cacheMachineOverlaysGeneratedPath="$cacheMachinePath"/overlays
	rm -rf "$cacheMachineOverlaysGeneratedPath"
	mkdir -m 0755 -p "$cacheMachineOverlaysGeneratedPath"
	
	cacheMachineDisksPath="$cacheMachinePath"/disks
	mkdir -m 0755 -p "$cacheMachineDisksPath"
	
	export cacheMachineDisksMountsPath="$cacheMachinePath"/disks-mountpoint
	rm -rf "$cacheMachineDisksMountsPath"
	mkdir -m 0755 -p "$cacheMachineDisksMountsPath"
	
	cacheMachineArtefactsPath="$cacheMachinePath"/artefacts
	mkdir -m 0755 -p "$cacheMachineArtefactsPath"
}
machineFunctions+=(prepareMachinePaths)

function cleanUpMachinesCache()
{
	pushd "$cacheMachineGroupMachinesPath" 1>/dev/null 2>/dev/null
		local cachedMachine
		for cachedMachine in *
		do
			if [ ! -d "$cachedMachine" ]; then
				continue
			fi
			local -i found=0
			local knownMachine
			for knownMachine in "${knownMachines[@]}"
			do
				if [ "$knownMachine" = "$cachedMachine" ]; then
					found=1
					break
				fi
			done
			if [ $found -eq 0 ]; then
				rm -rf "$cachedMachine"
			fi
		done
	popd 1>/dev/null 2>/dev/null
}
machineFunctions+=(cleanUpMachinesCache)

function defaultMachineConfiguration()
{
	sourceDefaultConfiguration "machine"
}
machineFunctions+=(defaultMachineConfiguration)

function sourceMachineConfiguration()
{
	source "$configMachineConfigurationPath"
}
machineFunctions+=(sourceMachineConfiguration)

function validateMachineConfiguration()
{
	validateHypervisorNameAndOutputFormat
}
machineFunctions+=(validateMachineConfiguration)

machinePackageNames=()
function readMachinePackages()
{
	mapfile -t machinePackageNames < <(configuration_readPackageNames "$configMachinePackagesPath")
}
machineFunctions+=(readMachinePackages)

machineRpmFiles=()
function readMachineRpmFiles()
{
	mapfile -t machineRpmFiles < <(configuration_readRpmFiles "$configMachineRpmsPath")
}
machineFunctions+=(readMachineRpmFiles)

machineNics=()
function readMachineNicNames()
{
	mapfile -t machineNics < <(configuration_readNames "$configMachineNicsPath" "nic")
}
machineFunctions+=(readMachineNicNames)

machineDisks=()
function readMachineDiskNames()
{
	mapfile -t machineDisks < <(configuration_readNames "$configMachineDisksPath" "disk")
}
machineFunctions+=(readMachineDiskNames)

function configureNics()
{
	local nic
	for nic in "${machineNics[@]}"
	do
		local nicConfigureFunction
		for nicConfigureFunction in "${nicConfigureFunctions[@]}"
		do
			$nicConfigureFunction
		done
	done
}
machineFunctions+=(configureNics)

function configureDisks()
{
	local disk
	for disk in "${machineDisks[@]}"
	do
		local diskConfigureFunction
		for diskConfigureFunction in "${diskConfigureFunctions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${diskConfigureFunction}"
			$diskConfigureFunction
		done
	done
}
machineFunctions+=(configureDisks)

function createDisks()
{
	local disk
	for disk in "${machineDisks[@]}"
	do
		local diskCreateFunction
		for diskCreateFunction in "${diskCreateFunctions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${diskCreateFunction}"
			$diskCreateFunction
		done
	done
}
machineFunctions+=(createDisks)

machineDiskMountPointsInForwardDiskOrder=()
machineDiskMountPointsInReverseDiskOrder=()
function recordSortedDiskMountPoints()
{
	machineDiskMountPointsInForwardDiskOrder=()
	
	local mountPoint
	local disk
	while IFS=' ' read -r mountPoint disk
	do
		machineDiskMountPointsInForwardDiskOrder+=("$disk")
	done < <(sortDiskMountPointsInForwardOrder)
	
	machineDiskMountPointsInReverseDiskOrder=()
	local -i index
	for (( index=$((${#machineDiskMountPointsInForwardDiskOrder[*]}-1)); index>=0; index-- ))
	do
		disk=${machineDiskMountPointsInForwardDiskOrder[$index]}
		machineDiskMountPointsInReverseDiskOrder+=("$disk")
	done
}
machineFunctions+=(recordSortedDiskMountPoints)

function mountDisks()
{
	local disk
	for disk in "${machineDiskMountPointsInForwardDiskOrder[@]}"
	do
		if mountPointIsSpecial; then
			informationMessage INFO "${tab}${tab}${tab}${disk} (ignored)"
			continue
		fi
		
		local diskMountFuncton
		for diskMountFuncton in "${diskMountFunctions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${diskMountFuncton}"
			$diskMountFuncton
		done
	done
}
machineFunctions+=(mountDisks)

function installUnderlays()
{
	installFilesystem "$configMachineGroupUnderlaysPath"
	installFilesystem "$configMachineUnderlaysPath"
}
machineFunctions+=(installUnderlays)

function installRpmsFromYum()
{
	local yumFunction
	for yumFunction in "${yumFunctions[@]}"
	do
		$yumFunction
	done
}
machineFunctions+=(installRpmsFromYum)

function sourceMachineGenerators()
{
	# Relies on cacheMachineOverlaysGeneratedPath
	sourceGenerators "machine" "$configMachineGeneratorsPath"
}
machineFunctions+=(sourceMachineGenerators)

function installOverlays()
{
	installFilesystem "$configMachineGroupOverlaysPath"
	installFilesystem "$cacheMachineGroupOverlaysGeneratedPath"
	installFilesystem "$configMachineOverlaysPath"
	installFilesystem "$cacheMachineOverlaysGeneratedPath"
}
machineFunctions+=(installOverlays)

function determineRootDiskUuid()
{
	machineRootDiskFilesystemUuid=""
	local disk
	for disk in "${machineDisks[@]}"
	do
		if [ "${machineDisksConfigurationMountPoint["$disk"]}" = "/" ]; then
			machineRootDiskFilesystemUuid="${machineDisksConfigurationUuid["$disk"]}"
			break
		fi
	done
	
	if [ -z "$machineRootDiskFilesystemUuid" ]; then
		informationMessage FAIL "Could not find machine root disk UUID (do you have a root disk)?"
		exitError 1
	fi
}
machineFunctions+=(determineRootDiskUuid)

function determinKernelAdditionalOptions()
{
	local machineKernelOptions="root=UUID=${machineRootDiskFilesystemUuid}"
	if [ -n "$machineKernelAdditionalOptions" ]; then
		machineKernelOptions="${machineKernelOptions} ${machineKernelAdditionalOptions}"
	fi
}
machineFunctions+=(determinKernelAdditionalOptions)

function determineKernelAndInitRd()
{
	pushd "$cacheMachineDisksMountsPath" 1>/dev/null 2>/dev/null
		
		machineKernelAbsolutePath=""
		local file
		for file in boot/vmlinuz-*.x86_64
		do
			if [ -f "$file" ]; then
				machineKernelAbsolutePath="/${file}"
				break
			fi
		done
		
		if [ -z "$machineKernelAbsolutePath" ]; then
			informationMessage FAIL "Could not find kernel in /boot"
			exitError 1
		fi
		
		machineInitramfsAbsolutePath=""
		local file
		for file in boot/initramfs-*.img
		do
			if [ -f "$file" ]; then
				machineInitramfsAbsolutePath="/${file}"
				break
			fi
		done
		
		if [ -z "$machineInitramfsAbsolutePath" ]; then
			informationMessage FAIL "Could not find initramfs in /boot"
			exitError 1
		fi
	
	popd 1>/dev/null 2>/dev/null
	
	machineKernelFileName="$(purebash_basename "$machineKernelAbsolutePath")"
	machineInitramfsFileName="$(purebash_basename "$machineInitramfsAbsolutePath")"
}
machineFunctions+=(determineKernelAndInitRd)

function copyKernelAndInitRdForUnpartitioned()
{
	if [ "$machineHypervisorDiskFormat" != "unpartitioned" ]; then
		return 0
	fi
	
	cp "${cacheMachineDisksMountsPath}${machineKernelAbsolutePath}" "$cacheMachineArtefactsPath"/"$machineKernelFileName"
	ln -s "$machineKernelFileName" "$cacheMachineArtefactsPath"/vmlinuz
	
	cp "${cacheMachineDisksMountsPath}${machineInitramfsAbsolutePath}" "$cacheMachineArtefactsPath"/"$machineInitramfsFileName"
	ln -s "$machineInitramfsFileName" "$cacheMachineArtefactsPath"/initramfs.img
}
machineFunctions+=(copyKernelAndInitRdForUnpartitioned)

function installExtLinux()
{
	# Values match man partx (except for unpartitioned)
	case "$machineHypervisorDiskPartioning" in
		
		unpartitioned)
			return 0
		;;
		
		bsd|solaris|unixware)
			informationMessage FAIL "$machineHypervisorDiskPartioning partitioning is not supported for extlinux"
			exitError 1
		;;
		
		gpt)
			informationMessage FAIL "GPT partitioning is unsupported at this time for extlinux"
			exitError 1
		;;
		
		dos)
			:
		;;
	
	esac
	
	local disk
	for disk in "$machineDisks"
	do
		if [ "${machineDisksConfigurationBootable["$disk"]}" = "yes" ]; then
			local extlinuxFunction
			for extlinuxFunction in "${extlinuxFunctions[@]}"
			do
				# installExtlinux_determineInstallPath uses $disk
				$extlinuxFunction
			done
		fi
	done
}
machineFunctions+=(installExtLinux)

function recordHashesOfAllFiles()
{
	recordHashes "${cacheMachineDisksMountsPath}" "/" "$cacheMachineArtefactsPath"/files-installed.report.txt
}
machineFunctions+=(recordHashesOfAllFiles)

function unmountDisks()
{
	local disk
	for disk in "${machineDiskMountPointsInReverseDiskOrder[@]}"
	do
		if mountPointIsSpecial; then
			informationMessage INFO "${tab}${tab}${tab}${disk} (ignored)"
			continue
		fi
		
		local diskUnmountFunction
		for diskUnmountFunction in "${diskUnmountFunctions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${diskUnmountFunction}"
			$diskUnmountFunction
		done
	done
}
machineFunctions+=(unmountDisks)

function createMetadata()
{
	if [ "$machineHypervisorMetadataOutputFormat" = "none" ]; then
		return 0
	fi
	
	hypervisorMetadata_${machineHypervisorName}
}
machineFunctions+=(createMetadata)
