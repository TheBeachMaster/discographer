machines=()
machineFunctions=()

function verifyMachineNameIsValidDnsLabel()
{
	local -ir hostnameLength=${#machine}
	if [ $hostnameLength -lt 2 ]; then
		informationMessage FAIL "machine name must be at least 2 characters"
		exit 1
	fi
	
	if [ $hostnameLength -gt 63 ]; then
		informationMessage FAIL "machine name must be no more than 63 characters"
		exit 1
	fi
	
	case "${machine:0:1}" in
		
		[0-9]|-)
			informationMessage FAIL "machine name must not start with a number or hyphen"
			exit 1
		;;
		
		*)
			:
		;;
		
	esac
	
	local convertedHostname
	convertedHostname="$(printf "$machine" | tr -d 'A-Z')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must not contain upper case"
		exit 1
	fi
	
	convertedHostname="$(printf "$machine" | tr -d '.')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must not contain a domain name (ie period)"
		exit 1
	fi
	
	# Delete anything not in abc...
	convertedHostname="$(printf "$machine" | tr -d -C 'abcdefghijklmnopqrstuvwxyz0123456789-')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must consist of a-z, 0-9 or hyphen"
		exit 1
	fi
}
machineFunctions+=(verifyMachineNameIsValidDnsLabel)

function prepareMachinePaths()
{
	export configMachinePath="$machinesPath"/"$machine"
	if [ ! -d "$configMachinePath" ]; then
		informationMessage FAIL "Machine $machine missing machine config path $configMachinePath"
		exit 1
	fi
	
	configMachineConfigurationPath="$configMachinePath"/configuration
	if [ ! -f "$configMachineConfigurationPath" ]; then
		informationMessage FAIL "Machine $machine missing machine configuration file $configMachineConfigurationPath"
		exit 1
	fi
	
	configMachinePackagesPath="$configMachinePath"/packages
	if [ ! -f "$configMachinePackagesPath" ]; then
		informationMessage FAIL "Machine $machine missing machine packages file $configMachinePackagesPath"
		exit 1
	fi
	
	configMachineDisksPath="$configMachinePath"/disks
	if [ ! -d "$configMachineDisksPath" ]; then
		informationMessage FAIL "Machine $machine missing machine disks folder $configMachineDisksPath"
		exit 1
	fi
	
	configMachineGeneratorsPath="$configMachinePath"/generators
	if [ ! -d "$configMachineGeneratorsPath" ]; then
		informationMessage FAIL "Machine $machine missing machine generators folder $configMachineGeneratorsPath"
		exit 1
	fi
	
	configMachineUnderlaysPath="$configMachinePath"/underlays
	if [ ! -d "$configMachineUnderlaysPath" ]; then
		informationMessage FAIL "Machine $machine missing machine underlays folder $configMachineUnderlaysPath"
		exit 1
	fi
	
	configMachineOverlaysPath="$configMachinePath"/overlays
	if [ ! -d "$configMachineOverlaysPath" ]; then
		informationMessage FAIL "Machine $machine missing machine overlays folder $configMachineOverlaysPath"
		exit 1
	fi
	
	if [ ! -d "$configMachinePath"/repositories ]; then
		informationMessage FAIL "Machine $machine missing machine folder $configMachinePath/repositories"
		exit 1
	fi
	
	cacheMachinePath="$cacheMachineGroupPath"/"$machine"
	mkdir -m 0755 -p "$cacheMachinePath"
	
	cacheMachineOverlaysGeneratedPath="$cacheMachinePath"/overlays
	rm -rf "$cacheMachineOverlaysGeneratedPath"
	mkdir -m 0755 -p "$cacheMachineOverlaysGeneratedPath"
	
	cacheMachineDisksPath="$cacheMachinePath"/disks
	mkdir -m 0755 -p "$cacheMachineDisksPath"
	
	cacheMachineDisksMountsPath="$cacheMachinePath"/disks-mountpoint
	rm -rf "$cacheMachineDisksMountsPath"
	mkdir -m 0755 -p "$cacheMachineDisksMountsPath"
}
machineFunctions+=(prepareMachinePaths)

function cleanUpMachinesCache()
{
	pushd "$cacheMachineGroupPath" 1>/dev/null 2>/dev/null
		local cachedMachine
		for cachedMachine in *
		do
			if [ ! -d "$cachedMachine" ]; then
				continue
			fi
			local -i found=0
			local knownMachine
			for knownMachine in "${knownMachines[@]}"
			do
				if [ "$knownMachine" = "$cachedMachine" ]; then
					found=1
					break
				fi
			done
			if [ $found -eq 0 ]; then
				rm -rf "$cachedMachine"
			fi
		done
	popd 1>/dev/null 2>/dev/null
}
machineFunctions+=(cleanUpMachinesCache)

function defaultMachineConfiguration()
{
	machineDistribution=centos
}
machineFunctions+=(defaultMachineConfiguration)

function sourceMachineConfiguration()
{
	source "$configMachineConfigurationPath"
}
machineFunctions+=(sourceMachineConfiguration)

function exportMachineConfiguration()
{
	export machineDistribution="$machineDistribution"
}
machineFunctions+=(exportMachineConfiguration)

machinePackageNames=()
function readMachinePackages()
{
	machinePackageNames=()
	local packageName
	while IFS= read -r packageName
	do
		machinePackageNames+=("$packageName")
	done < <(cat "$configMachinePackagesPath")
	
}
machineFunctions+=(readMachinePackages)

machineDisks=()
function readMachineDiskNames()
{
	local -i rootDiskExists=0
	pushd "$configMachineDisksPath" 1>/dev/null 2>/dev/null
		
		local diskFile
		local disk
		for diskFile in *.disk
		do
			if [ ! -f "$diskFile" ]; then
				continue
			fi
			if [ "$diskFile" = "root.disk" ]; then
				rootDiskExists=1
			fi
			disk="${diskFile%%.disk}"
			machineDisks+=("$disk")
		done

	popd 1>/dev/null 2>/dev/null
	if [ $rootDiskExists -eq 0 ]; then
		informationMessage FAIL "Machine $machine does not have essential disk root"
		exit 1
	fi
}
machineFunctions+=(readMachineDiskNames)

function createDisks()
{
	local disk
	for disk in "${machineDisks[@]}"
	do
		local diskCreateFunction
		for diskCreateFunction in "${diskCreateFunctions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${diskCreateFunction}"
			$diskCreateFunction
		done
	done
}
machineFunctions+=(createDisks)

machineDiskMountPointsInDiskOrder=()
function recordSortedDiskMountPoints()
{
	machineDiskMountPointsInDiskOrder=()
	
	local mountPoint
	local disk
	while IFS=' ' read -r mountPoint disk
	do
		machineDiskMountPointsInDiskOrder+=("$disk")
	done < <(sortDiskMountPoints)
}
machineFunctions+=(recordSortedDiskMountPoints)

function mountDisks()
{
	local disk
	for disk in "${machineDiskMountPointsInDiskOrder[@]}"
	do
		if mountPointIsSpecial; then
			informationMessage INFO "${tab}${tab}${tab}${disk} (ignored)"
			continue
		fi
		
		local diskMountFuncton
		for diskMountFuncton in "${diskMountFunctions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${diskMountFuncton}"
			$diskMountFuncton
		done
	done
}
machineFunctions+=(mountDisks)

function installUnderlays()
{
	installFilesystem "$configMachineGroupUnderlaysPath"
	installFilesystem "$configMachineUnderlaysPath"
}
machineFunctions+=(installUnderlays)

function fillInMachineYumConfTemplate()
{
	configMachineYumConfigFile="$cacheMachinePath"/yum.conf
	
	# Do we need to manually install this first, before yum?
	export yumConfigDistributionVersionPackage=${machineDistribution}-release
	
	if [ "$beVerbose" = "yes" ]; then
		export yumConfigDebugLevel=10
		export yumConfigErrorLevel=10
		export yumConfigRpmVerbository=debug
	else
		export yumConfigDebugLevel=2
		export yumConfigErrorLevel=2
		export yumConfigRpmVerbository=info
	fi
	
	templateFile "$configYumConfigFileTemplatePath" >"$configMachineYumConfigFile"
}
machineFunctions+=(fillInMachineYumConfTemplate)

function yumWrapper()
{
	if [ "$(uname)" = "Darwin" ]; then
		# yum does not exist in brew; installing via source has problems (msgfmt, broken Makefile, broken install utility; Python versioning)
		return 0
	fi
	
	if [ "$beVerbose" = no ]; then
		local -r yumVerbosity=" --quiet"
	else
		local -r yumVerbosity=""
	fi
	
	# assumeyes, color=never, installroot are part of yum.conf
	
	
	
	
	set -x
	yum${yumVerbosity} --config="$configMachineYumConfigFile" --cacheonly "$@"
	set +x
}

function installRpms()
{
	# http://www.philchen.com/2009/02/14/how-to-create-an-amazon-elastic-compute-cloud-ec2-machine-image-ami
	# http://geek.co.il/2010/03/14/how-to-build-a-chroot-jail-environment-for-centos
	
	# It is assumed that Core packages are controlled via machine group packages
	#yumWrapper groupinstall Core
	
	# Fix-up yum.conf and repositories in the disk image
	# cacheYumPath="$cacheYumPath" configMachinePath="$configMachinePath" configYumPath="$configYumPath" templateFile "$configYumConfigFileTemplatePath" >"$configMachineYumConfigFile"

	# rpm -q --whatprovides /usr/sbin/chroot to find a file
	
	
	
	runInMounts yumWrapper install "${machineGroupPackageNames[@]}" "${machinePackageNames[@]}"
}
machineFunctions+=(installRpms)

function cleanUpYum()
{
	yumWrapper clean all
}
machineFunctions+=(cleanUpYum)

function sourceMachineGenerators()
{
	# Relies on cacheMachineOverlaysGeneratedPath
	sourceGenerators "machine" "$configMachineGeneratorsPath"
}
machineFunctions+=(sourceMachineGenerators)

function installOverlays()
{
	installFilesystem "$configMachineGroupOverlaysPath"
	installFilesystem "$cacheMachineGroupOverlaysGeneratedPath"
	installFilesystem "$configMachineOverlaysPath"
	installFilesystem "$cacheMachineOverlaysGeneratedPath"
}
machineFunctions+=(installOverlays)

machineDiskMountPointsInReverseDiskOrder=()
function recordReverseSortedDiskMountPoints()
{
	machineDiskMountPointsInReverseDiskOrder=()
	
	local mountPoint
	local disk
	while IFS=' ' read -r mountPoint disk
	do
		machineDiskMountPointsInReverseDiskOrder+=("$disk")
	done < <(reverseSortDiskMountPoints)
}
machineFunctions+=(recordReverseSortedDiskMountPoints)

function unmountDisks()
{
	local disk
	for disk in "$machineDiskMountPointsInReverseDiskOrder[@]"
	do
		if mountPointIsSpecial; then
			informationMessage INFO "${tab}${tab}${tab}${disk} (ignored)"
			continue
		fi
		
		local diskUnmountFuncton
		for diskUnmountFuncton in "$diskUnmountFunctons[@]"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${diskUnmountFuncton}"
			$diskUnmountFuncton
		done
	done
}
machineFunctions+=(unmountDisks)
