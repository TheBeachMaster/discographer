machine_functions=()

function machine_verifyNameIsValidDnsLabel()
{
	local -ir hostnameLength=${#machineName}
	if [ $hostnameLength -lt 2 ]; then
		informationMessage FAIL "machine name must be at least 2 characters"
		exit 1
	fi
	
	if [ $hostnameLength -gt 63 ]; then
		informationMessage FAIL "machine name must be no more than 63 characters"
		exit 1
	fi
	
	case "${machine:0:1}" in
		
		[0-9]|-)
			informationMessage FAIL "machine name must not start with a number or hyphen"
			exit 1
		;;
		
		*)
			:
		;;
		
	esac
	
	local convertedHostname
	convertedHostname="$(printf "${machineName}" | tr -d 'A-Z')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must not contain upper case"
		exit 1
	fi
	
	convertedHostname="$(printf "${machineName}" | tr -d '.')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must not contain a domain name (ie period)"
		exit 1
	fi
	
	# Delete anything not in abc...
	convertedHostname="$(printf "${machineName}" | tr -d -C 'abcdefghijklmnopqrstuvwxyz0123456789-')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must consist of a-z, 0-9 or hyphen"
		exit 1
	fi
}
machine_functions+=(machine_verifyNameIsValidDnsLabel)

machine_configPath=""
machine_configConfigurationFilePath=""
machine_configDisksPath=""
machine_configNicsPath=""
machine_configGeneratorsPath=""
machine_configUnderlaysPath=""
machine_configOverlaysPath=""
machine_configRepositoriesPath=""
function machine_prepareConfigPaths()
{
	machine_configPath="$machine_group_machinesPath"/"${machineName}"
	if [ ! -d "$machine_configPath" ]; then
		informationMessage FAIL "Machine ${machineName} missing machine config path $machine_configPath"
		exit 1
	fi
	
	machine_configConfigurationFilePath="$machine_configPath"/configuration
	if [ ! -f "$machine_configConfigurationFilePath" ]; then
		informationMessage FAIL "Machine ${machineName} missing machine configuration file $machine_configConfigurationFilePath"
		exit 1
	fi
	
	machine_configDisksPath="$machine_configPath"/disks
	if [ ! -d "$machine_configDisksPath" ]; then
		informationMessage FAIL "Machine ${machineName} missing machine disks folder $machine_configDisksPath"
		exit 1
	fi
	
	machine_configNicsPath="$machine_configPath"/nics
	if [ ! -d "$machine_configNicsPath" ]; then
		informationMessage FAIL "Machine ${machineName} missing machine nics folder $machine_configNicsPath"
		exit 1
	fi
	
	machine_configGeneratorsPath="$machine_configPath"/generators
	if [ ! -d "$machine_configGeneratorsPath" ]; then
		informationMessage FAIL "Machine ${machineName} missing machine generators folder $machine_configGeneratorsPath"
		exit 1
	fi
	
	machine_configUnderlaysPath="$machine_configPath"/underlays
	if [ ! -d "$machine_configUnderlaysPath" ]; then
		informationMessage FAIL "Machine ${machineName} missing machine underlays folder $machine_configUnderlaysPath"
		exit 1
	fi
	
	machine_configOverlaysPath="$machine_configPath"/overlays
	if [ ! -d "$machine_configOverlaysPath" ]; then
		informationMessage FAIL "Machine ${machineName} missing machine overlays folder $machine_configOverlaysPath"
		exit 1
	fi
	
	machine_configRepositoriesPath="$machine_configPath"/repositories
	if [ ! -d "$machine_configRepositoriesPath" ]; then
		informationMessage FAIL "Machine ${machineName} missing repositories folder $machine_configRepositoriesPath"
		exit 1
	fi
}
machine_functions+=(machine_prepareConfigPaths)

machine_cachePath=""
machine_cacheOverlaysGeneratedPath=""
machine_cacheDisksPath=""
machine_cacheDisksMountPath=""
machine_cacheArtefactsPath=""
function machine_prepareCachePaths()
{
	machine_cachePath="$machine_group_cacheMachinesPath"/"${machineName}"
	
	machine_cacheOverlaysGeneratedPath="$machine_cachePath"/overlays/generated
	
	machine_cacheDisksPath="$machine_cachePath"/disks
	
	machine_cacheDisksMountPath="$machine_cachePath"/disks-mountpoint
	
	machine_cacheArtefactsPath="$machine_cachePath"/artefacts
}
machine_functions+=(machine_prepareCachePaths)

function machine_makeCacheFolders()
{
	mkdir -m 0755 -p "$machine_cachePath"
	
	rm -rf "$machine_cacheOverlaysGeneratedPath"
	mkdir -m 0755 -p "$machine_cacheOverlaysGeneratedPath"
	
	rm -rf "$machine_cacheDisksPath"
	mkdir -m 0755 -p "$machine_cacheDisksPath"
	
	rm -rf "$machine_cacheDisksMountPath"
	mkdir -m 0755 -p "$machine_cacheDisksMountPath"
	
	rm -rf "$machine_cacheArtefactsPath"
	mkdir -m 0755 -p "$machine_cacheArtefactsPath"
}
machine_functions+=(machine_makeCacheFolders)

function machine_defaultConfiguration()
{
	configuration_sourceDefaultConfiguration "machine"
}
machine_functions+=(machine_defaultConfiguration)

function machine_sourceConfiguration()
{
	source "$machine_configConfigurationFilePath"
}
machine_functions+=(machine_sourceConfiguration)

function machine_validateConfiguration()
{
	hypervisor_validateHypervisorNameAndOutputFormat
	hypervisor_findOperatingSystemIdAndName
}
machine_functions+=(machine_validateConfiguration)

machine_packageNames=()
function machine_readRpmPackageNames()
{
	mapfile -t machine_packageNames < <(configuration_readPackageNames "$machine_configPath" "rpm")
}
machine_functions+=(machine_readRpmPackageNames)

machine_rpmFiles=()
function machine_readRpmFiles()
{
	mapfile -t machine_rpmFiles < <(configuration_readPackageFiles "$machine_configPath" "rpm")
}
machine_functions+=(machine_readRpmFiles)

machine_nics=()
function machine_readNicNames()
{
	mapfile -t machine_nics < <(configuration_readNames "$machine_configNicsPath" "nic")
}
machine_functions+=(machine_readNicNames)

machine_disks=()
function machine_readDiskNames()
{
	mapfile -t machine_disks < <(configuration_readNames "$machine_configDisksPath" "disk")
}
machine_functions+=(machine_readDiskNames)

function machine_configureNics()
{
	local nic
	for nic in "${machine_nics[@]}"
	do
		local nic_configure_function
		for nic_configure_function in "${nic_configure_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${nic_configure_function}"
			$nic_configure_function
		done
	done
}
machine_functions+=(machine_configureNics)

function machine_configureDisks()
{
	local disk
	for disk in "${machine_disks[@]}"
	do
		local disk_configure_function
		for disk_configure_function in "${disk_configure_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_configure_function}"
			$disk_configure_function
		done
	done
}
machine_functions+=(machine_configureDisks)

function machine_mounting_mountDisks()
{
	local disk
	for disk in "${machine_disks[@]}"
	do
		local disk_mount_function
		for disk_mount_function in "${disk_mount_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_mount_function}"
			$disk_mount_function
		done
	done
}
machine_functions+=(machine_mounting_mountDisks)

machine_diskMountPointsInForwardDiskOrder=()
machine_diskMountPointsInReverseDiskOrder=()
function machine_recordSortedDiskMountPoints()
{
	machine_diskMountPointsInForwardDiskOrder=()
	
	local mountPoint
	local disk
	while IFS=' ' read -r mountPoint disk
	do
		machine_diskMountPointsInForwardDiskOrder+=("$disk")
	done < <(mounting_sortDiskMountPointsInForwardOrder)
	
	machine_diskMountPointsInReverseDiskOrder=()
	local -i index
	for (( index=$((${#machine_diskMountPointsInForwardDiskOrder[*]}-1)); index>=0; index-- ))
	do
		disk=${machine_diskMountPointsInForwardDiskOrder[$index]}
		machine_diskMountPointsInReverseDiskOrder+=("$disk")
	done
}
machine_functions+=(machine_recordSortedDiskMountPoints)

function machine_mounting_mountDiskPartitions()
{
	local disk
	for disk in "${machine_diskMountPointsInForwardDiskOrder[@]}"
	do
		local disk_partitionMount_function
		for disk_partitionMount_function in "${disk_partitionMount_functions[@]}"
		do
			if mounting_mountPointIsSpecial; then
				informationMessage INFO "${tab}${tab}${tab}${disk} (ignored)"
				continue
			fi
			
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_partitionMount_function}"
			$disk_partitionMount_function
		done
	done
}
machine_functions+=(machine_mounting_mountDiskPartitions)

function machine_installUnderlays()
{
	underlay_overlay_installFilesystem "$machine_group_configUnderlaysPath"
	underlay_overlay_installFilesystem "$machine_configUnderlaysPath"
}
machine_functions+=(machine_installUnderlays)

# required for the yum kernel installer to work!
# effectively a generated underlay
function machine_installFsTab()
{
	underlay_overlay_createFstab
}
machine_functions+=(machine_installFsTab)

function machine_yumFunctions()
{
	local yum_function
	for yum_function in "${yum_functions[@]}"
	do
		informationMessage INFO "${tab}${tab}${tab}${yum_function}"
		$yum_function
	done
}
machine_functions+=(machine_yumFunctions)

function machine_sourceMachineGenerators()
{
	# Relies on machine_cacheOverlaysGeneratedPath
	generators_source "machine" "$machine_configGeneratorsPath"
}
machine_functions+=(machine_sourceMachineGenerators)

function machine_installOverlays()
{
	underlay_overlay_installFilesystem "$machine_group_configOverlaysPath"
	underlay_overlay_installFilesystem "$machine_group_cacheOverlaysGeneratedPath"
	underlay_overlay_installFilesystem "$machine_configOverlaysPath"
	underlay_overlay_installFilesystem "$machine_cacheOverlaysGeneratedPath"
}
machine_functions+=(machine_installOverlays)

function machine_bootKernelFunctions()
{
	local boot_kernel_function
	for boot_kernel_function in "${boot_kernel_functions[@]}"
	do
		informationMessage INFO "${tab}${tab}${tab}${boot_kernel_function}"
		$boot_kernel_function
	done
}
machine_functions+=(machine_bootKernelFunctions)

function machine_suidGuidWhitelist()
{
	suid_whitelistSuid "$machine_group_configPath" "$machine_configPath"
	suid_whitelistGuid "$machine_group_configPath" "$machine_configPath"
}
machine_functions+=(machine_suidGuidWhitelist)

function machine_recordHashesOfAllFiles()
{
	hash_recordHashes "${machine_cacheDisksMountPath}" "/" "$machine_cacheArtefactsPath" .report.txt
}
machine_functions+=(machine_recordHashesOfAllFiles)

function machine_mounting_unmountDiskPartitions()
{
	local disk
	for disk in "${machine_diskMountPointsInReverseDiskOrder[@]}"
	do
		if mounting_mountPointIsSpecial; then
			informationMessage INFO "${tab}${tab}${tab}${disk} (ignored)"
			continue
		fi
		
		local disk_partitionUnmount_function
		for disk_partitionUnmount_function in "${disk_partitionUnmount_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_partitionUnmount_function}"
			$disk_partitionUnmount_function
		done
	done
}
machine_functions+=(machine_mounting_unmountDiskPartitions)

function machine_mounting_unmountDisks()
{
	local disk
	for disk in "${machine_diskMountPointsInReverseDiskOrder[@]}"
	do
		local disk_unmount_function
		for disk_unmount_function in "${disk_unmount_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_unmount_function}"
			$disk_unmount_function
		done
	done
}
machine_functions+=(machine_mounting_unmountDisks)

function machine_createMetadata()
{
	if [ "$configuration_machine_hypervisorMetadataFormat" = "none" ]; then
		return 0
	fi
	
	hypervisor_metadata_${configuration_machine_hypervisorName}
}
machine_functions+=(machine_createMetadata)
