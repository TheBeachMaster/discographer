machines=()
machine_functions=()

function machine_verifyNameIsValidDnsLabel()
{
	local -ir hostnameLength=${#machine}
	if [ $hostnameLength -lt 2 ]; then
		informationMessage FAIL "machine name must be at least 2 characters"
		exit 1
	fi
	
	if [ $hostnameLength -gt 63 ]; then
		informationMessage FAIL "machine name must be no more than 63 characters"
		exit 1
	fi
	
	case "${machine:0:1}" in
		
		[0-9]|-)
			informationMessage FAIL "machine name must not start with a number or hyphen"
			exit 1
		;;
		
		*)
			:
		;;
		
	esac
	
	local convertedHostname
	convertedHostname="$(printf "$machine" | tr -d 'A-Z')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must not contain upper case"
		exit 1
	fi
	
	convertedHostname="$(printf "$machine" | tr -d '.')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must not contain a domain name (ie period)"
		exit 1
	fi
	
	# Delete anything not in abc...
	convertedHostname="$(printf "$machine" | tr -d -C 'abcdefghijklmnopqrstuvwxyz0123456789-')"
	if [ ${#convertedHostname} != $hostnameLength ]; then
		informationMessage FAIL "machine name must consist of a-z, 0-9 or hyphen"
		exit 1
	fi
}
machine_functions+=(machine_verifyNameIsValidDnsLabel)

function machine_prepareConfigPaths()
{
	configMachinePath="$machinesPath"/"$machine"
	if [ ! -d "$configMachinePath" ]; then
		informationMessage FAIL "Machine $machine missing machine config path $configMachinePath"
		exit 1
	fi
	
	configMachineConfigurationPath="$configMachinePath"/configuration
	if [ ! -f "$configMachineConfigurationPath" ]; then
		informationMessage FAIL "Machine $machine missing machine configuration file $configMachineConfigurationPath"
		exit 1
	fi
	
	configMachinePackagesPath="$configMachinePath"/packages
	if [ ! -f "$configMachinePackagesPath" ]; then
		informationMessage FAIL "Machine $machine missing machine packages file $configMachinePackagesPath"
		exit 1
	fi
	
	configMachineRpmsPath="$configMachinePath"/rpms
	if [ ! -d "$configMachineRpmsPath" ]; then
		informationMessage FAIL "Machine $machine missing machine rpms folder $configMachineRpmsPath"
		exit 1
	fi
	
	configMachineDisksPath="$configMachinePath"/disks
	if [ ! -d "$configMachineDisksPath" ]; then
		informationMessage FAIL "Machine $machine missing machine disks folder $configMachineDisksPath"
		exit 1
	fi
	
	configMachineNicsPath="$configMachinePath"/nics
	if [ ! -d "$configMachineNicsPath" ]; then
		informationMessage FAIL "Machine $machine missing machine nics folder $configMachineNicsPath"
		exit 1
	fi
	
	configMachineGeneratorsPath="$configMachinePath"/generators
	if [ ! -d "$configMachineGeneratorsPath" ]; then
		informationMessage FAIL "Machine $machine missing machine generators folder $configMachineGeneratorsPath"
		exit 1
	fi
	
	configMachineUnderlaysPath="$configMachinePath"/underlays
	if [ ! -d "$configMachineUnderlaysPath" ]; then
		informationMessage FAIL "Machine $machine missing machine underlays folder $configMachineUnderlaysPath"
		exit 1
	fi
	
	configMachineOverlaysPath="$configMachinePath"/overlays
	if [ ! -d "$configMachineOverlaysPath" ]; then
		informationMessage FAIL "Machine $machine missing machine overlays folder $configMachineOverlaysPath"
		exit 1
	fi
	
	configMachineRepositoriesPath="$configMachinePath"/repositories
	if [ ! -d "$configMachineRepositoriesPath" ]; then
		informationMessage FAIL "Machine $machine missing repositories folder $configMachineRepositoriesPath"
		exit 1
	fi
}
machine_functions+=(machine_prepareConfigPaths)

function machine_prepareCachePaths()
{
	cacheMachinePath="$cacheMachineGroupMachinesPath"/"$machine"
	
	cacheMachineOverlaysGeneratedPath="$cacheMachinePath"/overlays
	
	cacheMachineDisksPath="$cacheMachinePath"/disks
	
	cacheMachineDisksMountsPath="$cacheMachinePath"/disks-mountpoint
	
	cacheMachineArtefactsPath="$cacheMachinePath"/artefacts
}
machine_functions+=(machine_prepareCachePaths)

function machine_cleanUpCache()
{
	pushd "$cacheMachineGroupMachinesPath" 1>/dev/null 2>/dev/null
		local cachedMachine
		for cachedMachine in *
		do
			if [ ! -d "$cachedMachine" ]; then
				continue
			fi
			local -i found=0
			local knownMachine
			for knownMachine in "${machine_group_knownMachines[@]}"
			do
				if [ "$knownMachine" = "$cachedMachine" ]; then
					found=1
					break
				fi
			done
			if [ $found -eq 0 ]; then
				rm -rf "$cachedMachine"
			fi
		done
	popd 1>/dev/null 2>/dev/null
}
machine_functions+=(machine_cleanUpCache)

function machine_defaultConfiguration()
{
	configuration_sourceDefaultConfiguration "machine"
}
machine_functions+=(machine_defaultConfiguration)

function machine_sourceConfiguration()
{
	source "$configMachineConfigurationPath"
}
machine_functions+=(machine_sourceConfiguration)

function machine_validateConfiguration()
{
	hypervisor_validateHypervisorNameAndOutputFormat
}
machine_functions+=(machine_validateConfiguration)

machine_packageNames=()
function machine_readPackages()
{
	mapfile -t machine_packageNames < <(configuration_readPackageNames "$configMachinePackagesPath")
}
machine_functions+=(machine_readPackages)

machine_rpmFiles=()
function machine_readRpmFiles()
{
	mapfile -t machine_rpmFiles < <(configuration_readRpmFiles "$configMachineRpmsPath")
}
machine_functions+=(machine_readRpmFiles)

machine_nics=()
function machine_readNicNames()
{
	mapfile -t machine_nics < <(configuration_readNames "$configMachineNicsPath" "nic")
}
machine_functions+=(machine_readNicNames)

machine_disks=()
function machine_readDiskNames()
{
	mapfile -t machine_disks < <(configuration_readNames "$configMachineDisksPath" "disk")
}
machine_functions+=(machine_readDiskNames)

function machine_configureNics()
{
	local nic
	for nic in "${machine_nics[@]}"
	do
		local nic_configure_function
		for nic_configure_function in "${nic_configure_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${nic_configure_function}"
			$nic_configure_function
		done
	done
}
machine_functions+=(machine_configureNics)

function machine_configureDisks()
{
	local disk
	for disk in "${machine_disks[@]}"
	do
		local disk_configure_function
		for disk_configure_function in "${disk_configure_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_configure_function}"
			$disk_configure_function
		done
	done
}
machine_functions+=(machine_configureDisks)

function machine_makeCacheFolders()
{
	mkdir -m 0755 -p "$cacheMachinePath"
	
	rm -rf "$cacheMachineOverlaysGeneratedPath"
	mkdir -m 0755 -p "$cacheMachineOverlaysGeneratedPath"
	
	rm -rf "$cacheMachineDisksPath"
	mkdir -m 0755 -p "$cacheMachineDisksPath"
	
	rm -rf "$cacheMachineDisksMountsPath"
	mkdir -m 0755 -p "$cacheMachineDisksMountsPath"
	
	rm -rf "$cacheMachineArtefactsPath"
	mkdir -m 0755 -p "$cacheMachineArtefactsPath"
}
machine_functions+=(machine_makeCacheFolders)

function machine_mounting_mountDisks()
{
	local disk
	for disk in "${machine_disks[@]}"
	do
		local disk_mount_function
		for disk_mount_function in "${disk_mount_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_mount_function}"
			$disk_mount_function
		done
	done
}
machine_functions+=(machine_mounting_mountDisks)

machine_diskMountPointsInForwardDiskOrder=()
machine_diskMountPointsInReverseDiskOrder=()
function machine_recordSortedDiskMountPoints()
{
	machine_diskMountPointsInForwardDiskOrder=()
	
	local mountPoint
	local disk
	while IFS=' ' read -r mountPoint disk
	do
		machine_diskMountPointsInForwardDiskOrder+=("$disk")
	done < <(mounting_sortDiskMountPointsInForwardOrder)
	
	machine_diskMountPointsInReverseDiskOrder=()
	local -i index
	for (( index=$((${#machine_diskMountPointsInForwardDiskOrder[*]}-1)); index>=0; index-- ))
	do
		disk=${machine_diskMountPointsInForwardDiskOrder[$index]}
		machine_diskMountPointsInReverseDiskOrder+=("$disk")
	done
}
machine_functions+=(machine_recordSortedDiskMountPoints)

function machine_mounting_mountDiskPartitions()
{
	local disk
	for disk in "${machine_diskMountPointsInForwardDiskOrder[@]}"
	do
		local disk_partitionMount_function
		for disk_partitionMount_function in "${disk_partitionMount_functions[@]}"
		do
			if mounting_mountPointIsSpecial; then
				informationMessage INFO "${tab}${tab}${tab}${disk} (ignored)"
				continue
			fi
			
			informationMessage INFO "${tab}${tab}${tab}${disk} ${diskMountFuncton}"
			$disk_partitionMount_function
		done
	done
}
machine_functions+=(machine_mounting_mountDiskPartitions)

function machine_installUnderlays()
{
	underlay_overlay_installFilesystem "$configMachineGroupUnderlaysPath"
	underlay_overlay_installFilesystem "$configMachineUnderlaysPath"
}
machine_functions+=(machine_installUnderlays)

function machine_installRpmsFromYum()
{
	local yum_function
	for yum_function in "${yum_functions[@]}"
	do
		$yum_function
	done
}
machine_functions+=(machine_installRpmsFromYum)

function machine_sourceMachineGenerators()
{
	# Relies on cacheMachineOverlaysGeneratedPath
	generators_source "machine" "$configMachineGeneratorsPath"
}
machine_functions+=(machine_sourceMachineGenerators)

function machine_installOverlays()
{
	underlay_overlay_installFilesystem "$configMachineGroupOverlaysPath"
	underlay_overlay_installFilesystem "$cacheMachineGroupOverlaysGeneratedPath"
	underlay_overlay_installFilesystem "$configMachineOverlaysPath"
	underlay_overlay_installFilesystem "$cacheMachineOverlaysGeneratedPath"
}
machine_functions+=(machine_installOverlays)

function machine_determineRootDiskUuid()
{
	machineRootDiskFilesystemUuid=""
	local disk
	for disk in "${machine_disks[@]}"
	do
		if [ "${machine_disksConfigurationMountPoint["$disk"]}" = "/" ]; then
			machineRootDiskFilesystemUuid="${machine_disksConfigurationUuid["$disk"]}"
			break
		fi
	done
	
	if [ -z "$machineRootDiskFilesystemUuid" ]; then
		informationMessage FAIL "Could not find machine root disk UUID (do you have a root disk)?"
		exitError 1
	fi
}
machine_functions+=(machine_determineRootDiskUuid)

function machine_determinKernelAdditionalOptions()
{
	local machineKernelOptions="root=UUID=${machineRootDiskFilesystemUuid}"
	if [ -n "$machineKernelAdditionalOptions" ]; then
		machineKernelOptions="${machineKernelOptions} ${machineKernelAdditionalOptions}"
	fi
}
machine_functions+=(machine_determinKernelAdditionalOptions)

function machine_determineKernelAndInitRd()
{
	pushd "$cacheMachineDisksMountsPath" 1>/dev/null 2>/dev/null
		
		machineKernelAbsolutePath=""
		local file
		for file in boot/vmlinuz-*.x86_64
		do
			if [ -f "$file" ]; then
				machineKernelAbsolutePath="/${file}"
				break
			fi
		done
		
		if [ -z "$machineKernelAbsolutePath" ]; then
			informationMessage FAIL "Could not find kernel in /boot"
			exitError 1
		fi
		
		machineInitramfsAbsolutePath=""
		local file
		for file in boot/initramfs-*.img
		do
			if [ -f "$file" ]; then
				machineInitramfsAbsolutePath="/${file}"
				break
			fi
		done
		
		if [ -z "$machineInitramfsAbsolutePath" ]; then
			informationMessage FAIL "Could not find initramfs in /boot"
			exitError 1
		fi
	
	popd 1>/dev/null 2>/dev/null
	
	machineKernelFileName="$(purebash_basename "$machineKernelAbsolutePath")"
	machineInitramfsFileName="$(purebash_basename "$machineInitramfsAbsolutePath")"
}
machine_functions+=(machine_determineKernelAndInitRd)

function machine_copyKernelAndInitRdForUnpartitioned()
{
	if [ "$machineHypervisorDiskFormat" != "unpartitioned" ]; then
		return 0
	fi
	
	cp "${cacheMachineDisksMountsPath}${machineKernelAbsolutePath}" "$cacheMachineArtefactsPath"/"$machineKernelFileName"
	ln -s "$machineKernelFileName" "$cacheMachineArtefactsPath"/vmlinuz
	
	cp "${cacheMachineDisksMountsPath}${machineInitramfsAbsolutePath}" "$cacheMachineArtefactsPath"/"$machineInitramfsFileName"
	ln -s "$machineInitramfsFileName" "$cacheMachineArtefactsPath"/initramfs.img
}
machine_functions+=(machine_copyKernelAndInitRdForUnpartitioned)

function machine_installExtLinux()
{
	# Values match man partx (except for unpartitioned)
	case "$machineHypervisorDiskPartioning" in
		
		unpartitioned)
			return 0
		;;
		
		bsd|solaris|unixware)
			informationMessage FAIL "$machineHypervisorDiskPartioning partitioning is not supported for extlinux"
			exitError 1
		;;
		
		gpt)
			informationMessage FAIL "GPT partitioning is unsupported at this time for extlinux"
			exitError 1
		;;
		
		dos)
			:
		;;
	
	esac
	
	local disk
	for disk in "$machine_disks"
	do
		if [ "${machine_disksConfigurationBootable["$disk"]}" = "yes" ]; then
			local extlinux_function
			for extlinux_function in "${extlinux_functions[@]}"
			do
				# installExtlinux_determineInstallPath uses $disk
				$extlinux_function
			done
		fi
	done
}
machine_functions+=(machine_installExtLinux)

function machine_recordHashesOfAllFiles()
{
	recordHashes "${cacheMachineDisksMountsPath}" "/" "$cacheMachineArtefactsPath"/files-installed.report.txt
}
machine_functions+=(machine_recordHashesOfAllFiles)

function machine_mounting_unmountDiskPartitions()
{
	local disk
	for disk in "${machine_diskMountPointsInReverseDiskOrder[@]}"
	do
		if mounting_mountPointIsSpecial; then
			informationMessage INFO "${tab}${tab}${tab}${disk} (ignored)"
			continue
		fi
		
		local disk_partitionUnmount_function
		for disk_partitionUnmount_function in "${disk_partitionUnmount_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_partitionUnmount_function}"
			$disk_partitionUnmount_function
		done
	done
}
machine_functions+=(machine_mounting_unmountDiskPartitions)

function machine_mounting_unmountDisks()
{
	local disk
	for disk in "${machine_diskMountPointsInReverseDiskOrder[@]}"
	do
		local disk_unmount_function
		for disk_unmount_function in "${disk_unmount_functions[@]}"
		do
			informationMessage INFO "${tab}${tab}${tab}${disk} ${disk_unmount_function}"
			$disk_unmount_function
		done
	done
}
machine_functions+=(machine_mounting_unmountDisks)

function machine_createMetadata()
{
	if [ "$machineHypervisorMetadataOutputFormat" = "none" ]; then
		return 0
	fi
	
	hypervisor_metadata_${machineHypervisorName}
}
machine_functions+=(machine_createMetadata)
