machine_group_functions=()

function machine_group_prepareConfigPaths()
{
	configMachineGroupPath="$machineGroupsPath"/"$machineGroup"
	if [ ! -d "$configMachineGroupPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group config path $configMachineGroupPath"
		exit 1
	fi
	
	configMachineGroupPackagesPath="$configMachineGroupPath"/packages
	if [ ! -f "$configMachineGroupPackagesPath" ]; then
		informationMessage FAIL "Machine group $machineGroup missing machine-group packages file $configMachineGroupPackagesPath"
		exit 1
	fi
	
	configMachinGroupeRpmsPath="$configMachineGroupPath"/rpms
	if [ ! -d "$configMachinGroupeRpmsPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group rpms folder $configMachinGroupeRpmsPath"
		exit 1
	fi
	
	configMachineGroupConfigurationPath="$configMachineGroupPath"/configuration
	if [ ! -f "$configMachineGroupConfigurationPath" ]; then
		informationMessage FAIL "Machine group $machineGroup missing machine-group configuration file $configMachineGroupPackagesPath"
		exit 1
	fi

	configMachineGroupGeneratorsPath="$configMachineGroupPath"/generators
	if [ ! -d "$configMachineGroupGeneratorsPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group generators path $configMachineGroupGeneratorsPath"
		exit 1
	fi
	
	configMachineGroupUnderlaysPath="$configMachineGroupPath"/underlays
	if [ ! -d "$configMachineGroupUnderlaysPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group underlays folder $configMachineGroupUnderlaysPath"
		exit 1
	fi
	
	configMachineGroupOverlaysPath="$configMachineGroupPath"/overlays
	if [ ! -d "$configMachineGroupOverlaysPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group overlays folder $configMachineGroupOverlaysPath"
		exit 1
	fi
}
machine_group_functions+=(machine_group_prepareConfigPaths)

function machine_group_prepareCachePaths()
{
	machinesPath="$configMachineGroupPath"/machines
	if [ ! -d "$machinesPath" ]; then
		informationMessage FAIL "Missing machine-group machines path $machinesPath"
		exit 1
	fi
	
	cacheMachineGroupPath="$cachePath"/machine-groups/"$machineGroup"

	cacheMachineGroupMachinesPath="$cacheMachineGroupPath"/machines

	cacheMachineGroupOverlaysGeneratedPath="$cacheMachineGroupPath"/overlays
}
machine_group_functions+=(machine_group_prepareCachePaths)

function machine_group_cleanUpCache()
{
	pushd "$cacheMachineGroupPath"/.. 1>/dev/null 2>/dev/null
		local cachedMachineGroup
		for cachedMachineGroup in *
		do
			if [ ! -d "$cachedMachineGroup" ]; then
				continue
			fi
			local -i found=0
			local knownMachineGroup
			for knownMachineGroup in "${main_knownMachineGroups[@]}"
			do
				if [ "$knownMachineGroup" = "$cachedMachineGroup" ]; then
					found=1
					break
				fi
			done
			if [ $found -eq 0 ]; then
				rm -rf "$cachedMachineGroup"
			fi
		done
	popd 1>/dev/null 2>/dev/null
}
machine_group_functions+=(machine_group_cleanUpCache)

function machine_group_defaultConfiguration()
{
	configuration_sourceDefaultConfiguration "machine-group"
}
machine_group_functions+=(machine_group_defaultConfiguration)

function machine_group_sourceConfiguration()
{
	source "$configMachineGroupConfigurationPath"
}
machine_group_functions+=(machine_group_sourceConfiguration)

machine_group_packageNames=()
function machine_group_readPackages()
{
	mapfile -t machine_group_packageNames < <(configuration_readPackageNames "$configMachineGroupPackagesPath")
}
machine_group_functions+=(machine_group_readPackages)

machine_group_rpmFiles=()
function machine_group_readRpmFiles()
{
	mapfile -t machine_group_rpmFiles < <(configuration_readRpmFiles "$configMachinGroupeRpmsPath")
}
machine_group_functions+=(machine_group_readRpmFiles)

function machine_group_makeCacheFolders()
{
	mkdir -m 0755 -p "$cacheMachineGroupPath"
	
	rm -rf "$cacheMachineGroupMachinesPath"
	mkdir -m 0755 -p "$cacheMachineGroupMachinesPath"
	
	rm -rf "$cacheMachineGroupOverlaysGeneratedPath"
	mkdir -m 0755 -p "$cacheMachineGroupOverlaysGeneratedPath"
}
machine_group_functions+=(machine_group_makeCacheFolders)

machine_group_knownMachines=()
function machine_group_determineKnownMachines()
{
	machine_group_knownMachines=()
	pushd "$machinesPath" 1>/dev/null 2>/dev/null
		local knownMachine
		for knownMachine in *
		do
			if [ ! -e "$knownMachine" ]; then
				continue
			fi
			machine_group_knownMachines+=(machine_group_"$knownMachine")
		done
	popd 1>/dev/null 2>/dev/null
}
machine_group_functions+=(machine_group_determineKnownMachines)

function machine_group_sourceGenerators()
{
	# Relies on $cacheMachineGroupOverlaysGeneratedPath
	generators_source "machine-group" "$configMachineGroupGeneratorsPath"
}
machine_group_functions+=(machine_group_sourceGenerators)

machines=()
function machine_group_determineMachines()
{
	machines=()
	pushd "$machinesPath" 1>/dev/null 2>/dev/null
		
		local machineName
		for machineName in *
		do
			if [ -e "$machineName" ]; then
				machines+=("$machineName")
			fi
		done
		
	popd  1>/dev/null 2>/dev/null
}
machine_group_functions+=(machine_group_determineMachines)

function machine_group_buildMachines()
{
	local machine
	local machine_function
	for machine in "${machines[@]}"
	do
		for machine_function in "${machine_functions[@]}"
		do
			# NICs
			declare -A machine_nicsConfigurationMac
			declare -A machine_nicsConfigurationVariant
			
			# Disks
			declare -A machine_disksConfigurationSize
			declare -A machine_disksConfigurationMountPoint
			declare -A machine_disksConfigurationFilesystemType
			declare -A machine_disksConfigurationBlockSize
			declare -A machine_disksConfigurationDiskImagePath
			declare -A machine_disksConfigurationImageMountPath
			declare -A machine_disksConfigurationVolumeLabel16Bytes
			declare -A machine_disksConfigurationUuid
			declare -A machine_disksConfigurationOptions
			declare -A machine_disksConfigurationMountOptions
			declare -A machine_disksConfigurationDumpOptions
			declare -A machine_disksConfigurationFsckOptions
			declare -A machine_disksConfigurationShrinkDisk
			declare -A machine_disksConfigurationBootable
			# not for configuration
			declare -A machine_disksConfigurationPartitionImagePath
			declare -A machine_disksConfigurationLoopbackDevice
			
			informationMessage INFO "${tab}${tab}${machine} ${machine_function}"
			$machine_function
		done
	done
}
machine_group_functions+=(machine_group_buildMachines)
