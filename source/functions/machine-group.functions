machineGroupFunctions=()

function prepareMachineGroupPaths()
{
	configMachineGroupPath="$machineGroupsPath"/"$machineGroup"
	if [ ! -d "$configMachineGroupPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group config path $configMachineGroupPath"
		exit 1
	fi
	
	configMachineGroupPackagesPath="$configMachineGroupPath"/packages
	if [ ! -f "$configMachineGroupPackagesPath" ]; then
		informationMessage FAIL "Machine group $machineGroup missing machine-group packages file $configMachineGroupPackagesPath"
		exit 1
	fi
	
	configMachinGroupeRpmsPath="$configMachineGroupPath"/rpms
	if [ ! -d "$configMachinGroupeRpmsPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group rpms folder $configMachinGroupeRpmsPath"
		exit 1
	fi
	
	configMachineGroupConfigurationPath="$configMachineGroupPath"/configuration
	if [ ! -f "$configMachineGroupConfigurationPath" ]; then
		informationMessage FAIL "Machine group $machineGroup missing machine-group configuration file $configMachineGroupPackagesPath"
		exit 1
	fi

	configMachineGroupGeneratorsPath="$configMachineGroupPath"/generators
	if [ ! -d "$configMachineGroupGeneratorsPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group generators path $configMachineGroupGeneratorsPath"
		exit 1
	fi
	
	cacheMachineGroupPath="$cachePath"/machine-groups/"$machineGroup"
	mkdir -m 0755 -p "$cacheMachineGroupPath"
	
	cacheMachineGroupMachinesPath="$cacheMachineGroupPath"/machines
	rm -rf "$cacheMachineGroupMachinesPath"
	mkdir -m 0755 -p "$cacheMachineGroupMachinesPath"
	
	cacheMachineGroupOverlaysGeneratedPath="$cacheMachineGroupPath"/overlays
	rm -rf "$cacheMachineGroupOverlaysGeneratedPath"
	mkdir -m 0755 -p "$cacheMachineGroupOverlaysGeneratedPath"
	
	configMachineGroupUnderlaysPath="$configMachineGroupPath"/underlays
	if [ ! -d "$configMachineGroupUnderlaysPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group underlays folder $configMachineGroupUnderlaysPath"
		exit 1
	fi
	
	configMachineGroupOverlaysPath="$configMachineGroupPath"/overlays
	if [ ! -d "$configMachineGroupOverlaysPath" ]; then
		informationMessage FAIL "Machine-group $machineGroup missing machine-group overlays folder $configMachineGroupOverlaysPath"
		exit 1
	fi
	
	machinesPath="$configMachineGroupPath"/machines
	if [ ! -d "$machinesPath" ]; then
		informationMessage FAIL "Missing machine-group machines path $machinesPath"
		exit 1
	fi
}
machineGroupFunctions+=(prepareMachineGroupPaths)

function cleanUpMachineGroupsCache()
{
	pushd "$cacheMachineGroupPath"/.. 1>/dev/null 2>/dev/null
		local cachedMachineGroup
		for cachedMachineGroup in *
		do
			if [ ! -d "$cachedMachineGroup" ]; then
				continue
			fi
			local -i found=0
			local knownMachineGroup
			for knownMachineGroup in "${knownMachineGroups[@]}"
			do
				if [ "$knownMachineGroup" = "$cachedMachineGroup" ]; then
					found=1
					break
				fi
			done
			if [ $found -eq 0 ]; then
				rm -rf "$cachedMachineGroup"
			fi
		done
	popd 1>/dev/null 2>/dev/null
}
machineGroupFunctions+=(cleanUpMachineGroupsCache)

function defaultMachineGroupConfiguration()
{
	sourceDefaultConfiguration "machine-group"
}
machineFunctions+=(defaultMachineGroupConfiguration)

function sourceMachineGroupConfiguration()
{
	source "$configMachineGroupConfigurationPath"
}
machineFunctions+=(sourceMachineGroupConfiguration)

machineGroupPackageNames=()
function readMachineGroupPackages()
{
	mapfile -t machineGroupPackageNames < <(configuration_readPackageNames)
}
machineGroupFunctions+=(readMachineGroupPackages)

machineGroupRpmFiles=()
function readMachineGroupRpmFiles()
{
	mapfile -t machineGroupRpmFiles < <(configuration_readRpmFiles "$configMachinGroupeRpmsPath")
}
machineGroupFunctions+=(readMachineGroupRpmFiles)

knownMachines=()
function determineKnownMachines()
{
	knownMachines=()
	pushd "$machinesPath" 1>/dev/null 2>/dev/null
		local knownMachine
		for knownMachine in *
		do
			if [ ! -e "$knownMachine" ]; then
				continue
			fi
			knownMachines+=("$knownMachine")
		done
	popd 1>/dev/null 2>/dev/null
}
machineGroupFunctions+=(determineKnownMachines)

function sourceMachineGroupGenerators()
{
	# Relies on $cacheMachineGroupOverlaysGeneratedPath
	sourceGenerators "machine-group" "$configMachineGroupGeneratorsPath"
}
machineGroupFunctions+=(sourceMachineGroupGenerators)

function determineMachines()
{
	machines=()
	pushd "$machinesPath" 1>/dev/null 2>/dev/null
		
		local machineName
		for machineName in *
		do
			if [ -e "$machineName" ]; then
				machines+=("$machineName")
			fi
		done
		
	popd  1>/dev/null 2>/dev/null
}
machineGroupFunctions+=(determineMachines)

function buildMachines()
{
	local machine
	local machineFunction
	for machine in "${machines[@]}"
	do
		for machineFunction in "${machineFunctions[@]}"
		do
			declare -A machineDisksConfigurationSize
			declare -A machineDisksConfigurationMountPoint
			declare -A machineDisksConfigurationFilesystemType
			declare -A machineDisksConfigurationBlockSize
			declare -A machineDisksConfigurationDiskImagePath
			declare -A machineDisksConfigurationImageMountPath
			declare -A machineDisksConfigurationVolumeLabel16Bytes
			declare -A machineDisksConfigurationUuid
			declare -A machineDisksConfigurationOptions
			declare -A machineDisksConfigurationMountOptions
			declare -A machineDisksConfigurationDumpOptions
			declare -A machineDisksConfigurationFsckOptions
			declare -A machineDisksConfigurationShrinkDisk
			declare -A machineDisksConfigurationBootable
			# not for configuration
			declare -A machineDisksConfigurationPartitionImagePath
			
			declare -A machineNicsConfigurationMac
			declare -A machineNicsConfigurationVariant
			
			informationMessage INFO "${tab}${tab}${machine} ${machineFunction}"
			$machineFunction
		done
	done
}
machineGroupFunctions+=(buildMachines)
