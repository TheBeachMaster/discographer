# Mounting is abstracted to support Mac OS X mounting in the future: http://nicksegers.com/mounting-to-loopback-in-osx/

function mounting_sortDiskMountPointsInForwardOrder()
{
	(
		local disk
		for disk in "${machine_disks[@]}"
		do
			echo "${machine_configuration_disksMountPoint["$disk"]} ${disk}"
		done
	) | sort --ignore-nonprinting --stable --key 1,1
}

function mounting_mountPointIsSpecial()
{
	local -r mountPoint="${machine_configuration_disksMountPoint["$disk"]}"
	if [ "${mountPoint:0:1}" != '/' ]; then
		return 0
	fi
	return 1
}

function mounting_mountDisk()
{
	local -r diskFilePath="$1"
	
	if dependency_isMacOSX; then
		return 0
	fi
	
	# Done this way rather than as "$(kpartx ...)" so as to capture any exit codes due to lack of mount points
	temporaryFiles_newFileToRemoveOnExit
	local -r outputFile="$TMP_FILE"
	kpartx -a -s -v "$diskFilePath" 1>"$outputFile"
	
	local -r loopbackDeviceUsed="$(head -n 1 "$outputFile" | awk '{print $8}')"
	FUNCTION_RESULT+=("$loopbackDeviceUsed")
	
	# ** Supposed to be the disk image, but doesn't seem to work **
	mounting_registerMountPointToRemoveOnExit "$loopbackDeviceUsed" mounting_unmountDisk
	#mounting_registerMountPointToRemoveOnExit "$diskFilePath" mounting_unmountDisk
	
	# Could do it all with awk, but that's too complex for now
	local -r devMapperUsed=/dev/mapper/"$(grep '^add map ' "$outputFile" | awk '{print $3}')"
	FUNCTION_RESULT+=("$devMapperUsed")
}

function mounting_mountLoopback()
{
	local -r filesystemType="$1"
	local -r imagePath="$2"
	local -r mountPath="$3"
	
	mkdir -m 0755 -p "$mountPath"
	
	if dependency_isMacOSX; then
		#local -r devicePath="$(hdiutil attach -imagekey diskimage-class=CRawDiskImage -readwrite -noverify -noautopen -noautofsck -mountpoint "$mountPath" -nomount "$imagePath")"
		#diskutil mount "$devicePath"
		return 0
	fi
	
	mount -o loop -t "$filesystemType" "$imagePath" "$mountPath"
	mounting_registerMountPointToRemoveOnExit "$mountPath" mounting_unmountLoopback
}

function mounting_mountBind()
{
	local -r mountPath="$1"
	
	if dependency_isMacOSX; then
		return 0
	fi
	
	mkdir -m 0755 -p "$mountPath"
	
	mount -o bind /dev "$mountPath"
	mounting_registerMountPointToRemoveOnExit "$mountPath" mounting_unmountBind
}

function mounting_unmountLoopback()
{
	local -r mountPath="$1"
	
	if dependency_isMacOSX; then
		return 0
	fi
	
	if [ -z "$exiting" ]; then
		unmounting_registerMountPointToRemoveOnExit
	fi
	umount "$mountPath"
}

function mounting_unmountBind()
{
	local -r mountPath="$1"
	
	if dependency_isMacOSX; then
		return 0
	fi
	
	if [ -z "$exiting" ]; then
		unmounting_registerMountPointToRemoveOnExit
	fi
	umount "$mountPath"
}

function mounting_unmountDisk()
{
	local -r diskFilePath="$1"
	
	if dependency_isMacOSX; then
		return 0
	fi
	
	if [ -z "$exiting" ]; then
		unmounting_registerMountPointToRemoveOnExit
	fi
	
	# Doesn't seem to work, but kpartx -d /dev/loopN does - so we need to find the loop
	kpartx -d "$diskFilePath"
	losetup --detach "$diskFilePath"
}

mounting_mountPointsToRemoveOnExitPaths=()
mounting_mountPointsToRemoveOnExitFunctions=()

function mounting_registerMountPointToRemoveOnExit()
{
	local mountPath="$1"
	local unmountFunction="$2"
	mounting_mountPointsToRemoveOnExitPaths+=("$mountPath")
	mounting_mountPointsToRemoveOnExitFunctions+=("$unmountFunction")
}

function unmounting_registerMountPointToRemoveOnExit()
{
	unset mounting_mountPointsToRemoveOnExitPaths[$((${#mounting_mountPointsToRemoveOnExitPaths[*]}-1))]
	unset mounting_mountPointsToRemoveOnExitFunctions[$((${#mounting_mountPointsToRemoveOnExitFunctions[*]}-1))]
}

function mounting_removeMountPointsOnExit()
{
	local mountPath
	local unmountFunction
	local -i index
	local -i adjustedIndex
	
	for (( index=${#mounting_mountPointsToRemoveOnExitPaths[*]}; index>0; index-- ))
	do
		adjustedIndex=$((index-1))
		mountPath="${mounting_mountPointsToRemoveOnExitPaths[$adjustedIndex]}"
		unmountFunction="${mounting_mountPointsToRemoveOnExitFunctions[$adjustedIndex]}"
		
		informationMessage INFO "${tab}${tab}${mountPath} ${unmountFunction}"
		$unmountFunction "$mountPath" || true
	done
}
