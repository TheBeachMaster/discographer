yum_functions=()

yum_configYumConfTemplateFilePath=""
yum_configYumConfTemplateFilePath=""
yum_configRepositoriesPath=""
function yum_prepareConfigPaths()
{
	yum_configYumPath="$configPath"/yum
	if [ ! -d "$yum_configYumPath" ]; then
		informationMessage FAIL "Yum config path missing at $yum_configYumPath"
		exit 1
	fi
	
	yum_configYumConfTemplateFilePath="$yum_configYumPath"/yum.conf.template
	if [ ! -f "$yum_configYumConfTemplateFilePath" ]; then
		informationMessage FAIL "Yum config file template missing at path $yum_configYumConfTemplateFilePath"
		exit 1
	fi
	
	yum_configRepositoriesPath="$machine_cacheDisksMountPath"/etc/yum.repos.d
	if [ ! -d "$yum_configRepositoriesPath" ]; then
		informationMessage FAIL "Yum config repositories path missing at $yum_configRepositoriesPath"
		exit 1
	fi
}
yum_functions+=(yum_prepareConfigPaths)

yum_cacheYumConfFilePath=""
yum_cacheDownloadedRpmsPath=""
yum_cacheMachinePath=""
yum_cacheYumConfFilePath=""
yum_cacheYumLogPath=""
yum_cacheMachineGroupPackagesListPath=""
yum_cacheMachinePackagesListPath=""
function yum_prepareCachePaths()
{
	yum_cachePath="$cachePath"/yum
	
	yum_cacheDownloadedRpmsPath="$yum_cachePath"/downloaded-rpms
	
	yum_cacheMachinePath="$machine_cachePath"/yum
	
	yum_cacheYumConfFilePath="$yum_cacheMachinePath"/yum.conf
	
	yum_cacheYumLogPath="$yum_cacheMachinePath"/log
	
	yum_cacheMachineGroupPackagesListPath="$yum_cacheMachinePath"/yum.machine-group.packages
	
	yum_cacheMachinePackagesListPath="$yum_cacheMachinePath"/yum.machine.packages
}
yum_functions+=(yum_prepareCachePaths)

function yum_makeCacheFolders()
{
	mkdir -m 0755 -p "$yum_cachePath"
	
	mkdir -m 0755 -p "$yum_cacheDownloadedRpmsPath"
	
	mkdir -m 0755 -p "$yum_cacheMachinePath"
	
	rm -rf "$yum_cacheYumLogPath"
	mkdir -m 0755 -p "$yum_cacheYumLogPath"
}
yum_functions+=(yum_makeCacheFolders)

function yum_fillInMachineYumConfTemplate()
{
	(
		if [ "$beDebug" = "yes" ]; then
			export yumConfigDebugLevel=10
			export yumConfigErrorLevel=10
			export yumConfigRpmVerbository=debug
		else
			export yumConfigDebugLevel=2
			export yumConfigErrorLevel=2
			export yumConfigRpmVerbository=info
		fi
		
		export machine_cacheDisksMountPath="$machine_cacheDisksMountPath"
		export configuration_machine_distribution="$configuration_machine_distribution"
		export configuration_machine_distributionMajorRevision="$configuration_machine_distributionMajorRevision"
	
		template_templateFile "$yum_configYumConfTemplateFilePath" >"$yum_cacheYumConfFilePath"
	)
}
yum_functions+=(yum_fillInMachineYumConfTemplate)

function yum_prepareRpmDb()
{
	rpm --rebuilddb --root=${machine_cacheDisksMountPath}
}
yum_functions+=(yum_prepareRpmDb)

yum_cacheDistributionVersionRpmFilePath=""
function yum_downloadDistributionVersionRpm()
{
	yum_cacheDistributionVersionRpmFilePath="$yum_cachePath"/"$configuration_machine_distributionReleaseRpm"
	
	if [ ! -f "$yum_cacheDistributionVersionRpmFilePath" ]; then
		curl "$configuration_machine_distributionReleaseRpmUrl" 1>"$yum_cacheDistributionVersionRpmFilePath" 2>/dev/null
	fi
}
yum_functions+=(yum_downloadDistributionVersionRpm)

function yum_installDistributionVersionRpm()
{
	rpm --install --root=${machine_cacheDisksMountPath} --nodeps --nosignature "$yum_cacheDistributionVersionRpmFilePath"
}
yum_functions+=(yum_installDistributionVersionRpm)

function yum_installYumRepositories()
{
	# Remove any shipped repos!
	rm -rf "$yum_configRepositoriesPath"/*.repo
	
	pushd "$machine_configRepositoriesPath" 1>/dev/null 2>/dev/null
		
		local file
		for file in *.repo
		do
			if [ -s "$file" ]; then
				# cat ensures that we do not copy a symlink
				cat "$file" >"$yum_configRepositoriesPath"/"$file"
			fi
		done
		
	popd 1>/dev/null 2>/dev/null
}
yum_functions+=(yum_installYumRepositories)

function yum_prepareYumCache()
{
	yum_wrapper "$configuration_machine_architecture" makecache 1>/dev/null
}
yum_functions+=(yum_prepareYumCache)

function yum_alDependenciesForPackagesMachineGroup()
{
	yum_localrepo_downloadAllDependenciesForPackagesAndRecord "$yum_cacheMachineGroupPackagesListPath" "$yum_cacheDownloadedRpmsPath" "${machine_group_packageNames[@]}"
}
yum_functions+=(yum_alDependenciesForPackagesMachineGroup)

function yum_installMachineGroupRpms()
{
	yum_localrepo_install x86_64 "$yum_cacheMachineGroupPackagesListPath" "$yum_cacheDownloadedRpmsPath"
}
yum_functions+=(yum_installMachineGroupRpms)

function yum_installMachineGroupLocalRpms()
{
	if [ ${#machine_group_rpmFiles[@]} -eq 0 ]; then
		return 0
	fi
	yum_wrapper_programYumLocalinstall "$configuration_machine_architecture" "$machine_group_configPath"/rpms "${machine_group_rpmFiles[@]}"
}
yum_functions+=(yum_installMachineGroupLocalRpms)

function yum_alDependenciesForPackagesMachine()
{
	yum_localrepo_downloadAllDependenciesForPackagesAndRecord "$configuration_machine_architecture" "$yum_cacheMachinePackagesListPath" "$yum_cacheDownloadedRpmsPath" "${machine_packageNames[@]}"
}
yum_functions+=(yum_alDependenciesForPackagesMachine)

function yum_installMachineRpms()
{
	yum_localrepo_install "$configuration_machine_architecture" "$yum_cacheMachinePackagesListPath" "$yum_cacheDownloadedRpmsPath"
}
yum_functions+=(yum_installMachineRpms)

function yum_installMachineLocalRpms()
{
	if [ ${#machine_rpmFiles[@]} -eq 0 ]; then
		return 0
	fi
	yum_wrapper_programYumLocalinstall "$configuration_machine_architecture" "${machine_configPath}"/rpms "${machine_rpmFiles[@]}"
}
yum_functions+=(yum_installMachineLocalRpms)

function yum_cleanUp()
{
	yum_wrapper clean all 1>/dev/null
}
yum_functions+=(yum_cleanUp)

function yum_recordInstalledRpms()
{
	local -r reportFile="$machine_cacheArtefactsPath"/yum-installed.report.txt
	printf "Package\tArchitecture\tVersion\tOrigin\n" >"$reportFile"
	yum_wrapper list installed2>/dev/null | tail -n +3 | tr '\n' '|' | sed -e 's/| / /g' | tr '|' '\n' | awk -v OFS=$'\t' '{split($1,a,/\./); print a[1],a[2],$2,$3}' >>"$reportFile"
}
yum_functions+=(yum_recordInstalledRpms)
