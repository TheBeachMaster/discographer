yum_functions=()

function yum_fillInMachineYumConfTemplate()
{
	configMachineYumConfigFile="$cacheMachinePath"/yum.conf
	
	export yumConfigDistributionVersionPackage=${machineDistribution}-release
	export yumConfigDistributionMajorRevision=${machineDistributionMajorRevision}
	
	export yumConfigRepositoriesPath="$cacheMachineDisksMountsPath"/etc/yum.repos.d
	
	if [ "$beDebug" = "yes" ]; then
		export yumConfigDebugLevel=10
		export yumConfigErrorLevel=10
		export yumConfigRpmVerbository=debug
	else
		export yumConfigDebugLevel=2
		export yumConfigErrorLevel=2
		export yumConfigRpmVerbository=info
	fi
	
	template_templateFile "$configYumConfigFileTemplatePath" >"$configMachineYumConfigFile"
}
yum_functions+=(yum_fillInMachineYumConfTemplate)

function yum_prepareRpmDb()
{
	rpm --rebuilddb --root=${cacheMachineDisksMountsPath}
}
yum_functions+=(yum_prepareRpmDb)

function yum_downloadDistributionVersionRpm()
{
	cacheYumDistributionVersionRpmPath="$cacheYumPath"/"$machineDistributionReleaseRpm"
	
	if [ ! -f "$cacheYumDistributionVersionRpmPath" ]; then
		curl "$machineDistributionReleaseRpmUrl" 1>"$cacheYumDistributionVersionRpmPath" 2>/dev/null
	fi
}
yum_functions+=(yum_downloadDistributionVersionRpm)

function yum_installDistributionVersionRpm()
{
	rpm --install --root=${cacheMachineDisksMountsPath} --nodeps --nosignature "$cacheYumDistributionVersionRpmPath"
}
yum_functions+=(yum_installDistributionVersionRpm)

function yum_installYumRepositories()
{
	# Remove any shipped repos!
	rm -rf "$yumConfigRepositoriesPath"/*.repo
	
	pushd "$configMachineRepositoriesPath" 1>/dev/null 2>/dev/null
		
		local file
		for file in *.repo
		do
			if [ -s "$file" ]; then
				# cat ensures that we do not copy a symlink
				cat "$file" >"$yumConfigRepositoriesPath"/"$file"
			fi
		done
		
	popd 1>/dev/null 2>/dev/null
}
yum_functions+=(yum_installYumRepositories)

function yum_prepareYumCache()
{
	yum_wrapper makecache
}
yum_functions+=(yum_prepareYumCache)

function yum_installMachineGroupRpms()
{
	yum_wrapper_install "${machineGroupPackageNames[@]}"
}
yum_functions+=(yum_installMachineGroupRpms)

function yum_installMachineGroupLocalRpms()
{
	yum_wrapper_localInstall "$configMachinGroupeRpmsPath" "${machineGroupRpmFiles[@]}"
}
yum_functions+=(yum_installMachineGroupLocalRpms)

function yum_installMachineRpms()
{
	yum_wrapper_install "${machinePackageNames[@]}"
}
yum_functions+=(yum_installMachineRpms)

function yum_installMachineLocalRpms()
{
	yum_wrapper_localInstall "$configMachineRpmsPath" "${machineRpmFiles[@]}"
}
yum_functions+=(yum_installMachineLocalRpms)

function yum_cleanUp()
{
	yum_wrapper clean all
}
yum_functions+=(yum_cleanUp)

function yum_recordInstalledRpms()
{
	local -r reportFile="$cacheMachineArtefactsPath"/rpms-installed.report.txt
	printf "Package.Architecture\tVersion\tOrigin\n" >"$reportFile"
	yum_wrapper list installed 2>/dev/null | tail -n +11 | awk -v OFS='\t' '{print $1,$2,$3}' >>"$reportFile"
}
yum_functions+=(yum_recordInstalledRpms)
