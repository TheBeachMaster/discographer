function hypervisorMetadata_kvm()
{
	informationMessage WARN "kvm metadata not supported"
}

function hypervisorMetadata_xen()
{
	informationMessage WARN "kvm metadata not supported"
}

function hypervisorMetadata_qemu()
{
	case "$machineHypervisorMetadataOutputFormat" in

		native)
			local -r qemuScript=""
			cat >"$qemuScript" <<-'EOF'
				#!/usr/bin/env bash
				set -e
				
				function purebash_dirname()
				{
				    local -r converted="${1%/*}"
				    if [ "$converted" = "$1" ]; then
				        echo "."
				    else
				        echo "$converted"
				    fi
				}

				function purebash_basename()
				{
				    echo "${1##*/}"
				}
				
				function findOurNameAndPath()
				{
				    readonly ourName="$(purebash_basename "$0")"
				    pushd "$(purebash_dirname "$0")" >/dev/null
				        readonly crudeOurPath="$(pwd)"
				    popd >/dev/null
				}
				
				function runQemuKvm()
				{
				    cd "$crudeOurPath" 1>/dev/null 2>/dev/null
			EOF
			cat >"$qemuScript" <<-EOF
				    exec -a "qemu-kvm-${machine}" qemu-kvm \
				        -m ${machineRamSizeMegabytes} \
				        -kernel "${machineKernelFileName}" \
				        -initrd "${machineInitramfsFileName}" \
				        -append "${machineKernelOptions}"
			EOF
			local disk
			for disk in "${machineDisks[@]}"
			do
				echo '\ ' >>"$qemuScript"
				echo -n "        -drive file=${disk}.${machineHypervisorDiskExtension},format=raw,if=virtio" >>"$qemuScript"
			done
			cat >"$qemuScript" <<-'EOF'
				}
				
				function main()
				{
				    findOurNameAndPath
				    runQemuKvm
				}
				
				main "$@"
			EOF
			
			chmod +x "$qemuScript"
		;;

		*)
			informationMessage FAIL "qemu metadata machineHypervisorMetadataOutputFormat $machineHypervisorMetadataOutputFormat not supported"
		;;

	esac
}

function hypervisorMetadata_vmware()
{
	case "$machineHypervisorMetadataOutputFormat" in

		native)
			informationMessage WARN "*********** TODO: vmware native format [vmx or vmc] ****************"
		;;
		
		ovf2)
			generateOvf2
		;;
		
		ova2)
			generateOva2
		;;
		
		*)
			informationMessage FAIL "vmware metadata machineHypervisorMetadataOutputFormat $machineHypervisorMetadataOutputFormat not supported"
		;;

	esac
}

function hypervisorMetadata_virtualbox()
{
	case "$machineHypervisorMetadataOutputFormat" in
	
		native)
			xml_VirtualBox >"$cacheMachineArtefactsPath"/"$machine".vbox
			mkdir -m 0755 -p "$cacheMachineArtefactsPath"/Logs
			mkdir -m 0755 -p "$cacheMachineArtefactsPath"/Snapshots
		;;
		
		ovf2)
			generateOvf2
		;;
		
		ova2)
			generateOva2
		;;
	
		*)
			informationMessage FAIL "virtualbox metadata machineHypervisorMetadataOutputFormat $machineHypervisorMetadataOutputFormat not supported"
		;;
	
	esac
}

function hypervisorMetadata_parallels()
{
	case "$machineHypervisorMetadataOutputFormat" in
		
		native)
			:
		;;
		
		*)
			informationMessage FAIL "parallels metadata machineHypervisorMetadataOutputFormat $machineHypervisorMetadataOutputFormat not supported"
		;;
		
	esac
}
