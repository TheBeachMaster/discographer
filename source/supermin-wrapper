#!/usr/bin/env bash
set +o allexport -o braceexpand +o emacs -o errexit +o errtrace +o functrace +o hashall +o histexpand +o history +o ignoreeof -o interactive-comments +o keyword +o monitor +o noclobber +o noexec +o noglob +o nolog +o notify +o nounset +o onecmd +o physical +o pipefail +o posix +o verbose +o vi +o xtrace;unset BASH_ENV;unset BASH_XTRACEFD;unset CDPATH;unset ENV;unset FCEDIT;unset FIGNORE;unset FUNCNEST;unset GLOBIGNORE;unset HISTCONTROL;unset HISTFILE;unset HISTFILESIZE;unset HISTIGNORE;unset HISTSIZE;unset HISTTIMEFORMAT;unset HOSTFILE;unset IGNOREEOF;unset INPUTRC;unset MAIL;unset MAILCHECK;unset MAILPATH;unset TMOUT;umask 022

function informationMessage()
{
	local messageKind="$1"
	local message="$2"
	
	case "$messageKind" in
		
		WARN|FAIL)
			echo "$ourName: $messageKind: $message"
		;;
		
		*)
			if [ "$optionVerbose" = "yes" ]; then
				echo "$ourName: $messageKind: $message"
			fi
		;;
	
	esac
}

# The purpose of these functions is to provide internal implementations of logic we can't be 100%
# sure of exists in the environment or is implemented as we would like for critical pieces of code.
# Such a critical piece is code executed before and during command line arg parsing (eg exitError)
function purebash_dirname()
{
	local -r converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		echo "."
	else
		echo "$converted"
	fi
}

function purebash_basename()
{
	echo "${1##*/}"
}

function setDebugging()
{
	# is set -x on?
	if [[ "$-" == *x* ]]; then
		export SUPERMIN_BASH_DEBUGGING="yes"
	elif [ ! -z "$SUPERMIN_BASH_DEBUGGING" ]; then
		if [ "$SUPERMIN_BASH_DEBUGGING" = "yes" ]; then
			set -x
		fi
	fi
}

function findOurNameAndPath()
{
	readonly ourName="$(purebash_basename "$0")"
	pushd "$(purebash_dirname "$0")" >/dev/null
	readonly crudeOurPath="$(pwd)"
	popd >/dev/null
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exit 1
}

function exitHelp()
{
	echo -n -E "Usage: ${ourName} -h
Usage: ${ourName} [-v] [-c configPath] [-s cachePath] [-f functionsPath] [-p pathsPath] [-o option] -- machine-groups...

Argument-less Switches
    -h  show this help
    -v  be more verbose

Argumented Switches
    Argument              Default
    -c configPath         ${configPath}
    -s cachePath          ${cachePath}
    -f functionsPath      ${functionsPath}
    -p pathsPath          ${pathsPath}
    -o option             See below
    --                    End of arguments

Variable Arguments
    machine-groups        A list of machine-group names in configPath/machine-groups/

Options
For options, prefix with either 'yes-' to turn it on
or 'no-' to turn it off. For example, to turn on 'chroot' :-

    ${ourName} -o yes-chroot

-o may be repeated as necessary. Options are evaluated in left-to-right order.
Last setting wins.

Options are as follows:-   Default
    chroot                 ${optionChroot}

Notes
A path is used to define the location of essential programs used during initial bootstrapping. It also defines a packageManager
to automatically install any missing dependencies. The PATH variable is reset to the location of these programs.
" 1>&2
	exit $1
}

function loadAnyConfiguration()
{
	configPath="$crudeOurPath"/config
	cachePath="$crudeOurPath"/cache
	functionsPath="$crudeOurPath"/functions
	pathsPath="$configPath"/paths
	optionVerbose="no"
	
	if [ -r /etc/"$ourName"/configuration ]; then
		source /etc/"$ourName"/configuration
	fi
	if [ -r ~/."$ourName" ]; then
		source ~/."$ourName"
	fi
}

function parseCommandLine()
{
	local OPTERR=1
	local OPTIND=1
	local OPTARG
	local option
	while getopts :hvc:s:p:f:o: option
	do
		case "$option" in
			
			h)
				exitHelp 2
			;;
			
			v)
				optionVerbose="yes"
			;;
			
			c)
				configPath="$OPTARG"
			;;
			
			s)
				cachePath="$OPTARG"
			;;
			
			f)
				functionsPath="$OPTARG"
			;;
			
			p)
				pathsPath="$OPTARG"
			;;
			
			o)
				if [ -z "$OPTARG" ]; then
					exitError "Invalid option -o requires an argument"
				fi
			
				case "$OPTARG" in
					
					no-chroot)
						optionChroot="no"
					;;
					
					yes-chroot)
						optionChroot="yes"
					;;
					
					*)
						exitError "Invalid option -o ${OPTARG}"
					;;
					
				esac
			;;
			
			'?')
				exitError "Invalid option -${OPTARG}"
			;;
			
		esac
	done
	
	shift $((OPTIND - 1))
	machineGroups=("$@")
	
	function makeCommandLinePathsAbsolute()
	{
		pushd "$configPath">/dev/null
			configPath="$(pwd)"
		popd >/dev/null

		pushd "$cachePath">/dev/null
			cachePath="$(pwd)"
		popd >/dev/null

		pushd "$functionsPath">/dev/null
			functionsPath="$(pwd)"
		popd >/dev/null

		pushd "$pathsPath">/dev/null
			pathsPath="$(pwd)"
		popd >/dev/null
	}
	makeCommandLinePathsAbsolute
}

function validateCommandLineArguments()
{
	if [ ! -d "$configPath" ]; then
		exitError "Config path $configPath does not exist or is not a directory"
	fi
	
	if [ ! -d "$cachePath" ]; then
		exitError "Cache path $cachePath does not exist or is not a directory"
	fi
	
	if [ ! -d "$functionsPath" ]; then
		exitError "Paths path $functionsPath does not exist or is not a directory"
	fi
	
	if [ ! -d "$pathsPath" ]; then
		exitError "Paths path $pathsPath does not exist or is not a directory"
	fi
	
	if [ ${#machineGroups[@]} -eq 0 ]; then
		exitError "Please specify at least one machine-group"
	fi
}

function sourceFunctions()
{
	pushd "$functionsPath" 1>/dev/null 2>/dev/null
		local functionFile
		for functionFile in *.functions
		do
			if [ -f "$functionFile" ]; then
				source "$functionFile"
			fi
		done
	popd 1>/dev/null 2>/dev/null
}

function main()
{
	setDebugging
	findOurNameAndPath
	loadAnyConfiguration
	parseCommandLine "$@"
	validateCommandLineArguments
	
	sourceFunctions
	
	initialiseTraps
	installDependencies
	executeMainFunctions
}

main "$@"
